This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.gitignore
.repomixignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
prisma/schema.prisma
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
repomix.config.json
src/app/add-password/add-password-form.tsx
src/app/add-password/page.tsx
src/app/api/add-password/route.ts
src/app/api/auth/[...nextauth]/route.ts
src/app/api/change-password/route.ts
src/app/api/check-user-auth-methods/route.ts
src/app/api/link-account/route.ts
src/app/api/progress-posts/[id]/comments/route.ts
src/app/api/progress-posts/route.ts
src/app/api/projects/[id]/milestones/route.ts
src/app/api/projects/[id]/route.ts
src/app/api/projects/route.ts
src/app/api/register/route.ts
src/app/api/tags/route.ts
src/app/api/user/linked-accounts/route.ts
src/app/api/user/profile/route.ts
src/app/api/user/unlink-account/route.ts
src/app/create/page.tsx
src/app/create/project-form.tsx
src/app/globals.css
src/app/layout.tsx
src/app/login/error/login-error-content.tsx
src/app/login/error/page.tsx
src/app/login/login-form.tsx
src/app/login/page.tsx
src/app/my-projects/my-projects-list.tsx
src/app/my-projects/page.tsx
src/app/page.tsx
src/app/projects/[id]/edit/not-found.tsx
src/app/projects/[id]/edit/page.tsx
src/app/projects/[id]/edit/project-edit-form.tsx
src/app/projects/[id]/not-found.tsx
src/app/projects/[id]/page.tsx
src/app/projects/[id]/project-view.tsx
src/app/register/page.tsx
src/app/register/register-form.tsx
src/app/settings/accounts/accounts-settings.tsx
src/app/settings/accounts/page.tsx
src/app/settings/layout.tsx
src/app/settings/page.tsx
src/app/settings/profile/page.tsx
src/app/settings/profile/profile-form.tsx
src/components/change-password-dialog.tsx
src/components/milestone-input.tsx
src/components/navbar.tsx
src/components/progress-post-card.tsx
src/components/progress-post-comments.tsx
src/components/progress-post-form.tsx
src/components/project-delete-dialog.tsx
src/components/project-milestones.tsx
src/components/project-progress-posts.tsx
src/components/providers.tsx
src/components/theme-toggle.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/collapsible.tsx
src/components/ui/confirmation-dialog.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/form.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/popover.tsx
src/components/ui/progress.tsx
src/components/ui/select.tsx
src/components/ui/slider.tsx
src/components/ui/sonner.tsx
src/components/ui/switch.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/hooks/use-confirmation-dialog.ts
src/lib/auth-utils.ts
src/lib/auth.ts
src/lib/db.ts
src/lib/milestone-templates.ts
src/lib/milestone-utils.ts
src/lib/utils.ts
src/types/next-auth.d.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

================
File: repomix.config.json
================
{
  "$schema": "https://repomix.com/schemas/latest/schema.json",
  "input": {
    "maxFileSize": 52428800
  },
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "files": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "compress": true,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "truncateBase64": false,
    "copyToClipboard": false,
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100,
      "includeDiffs": false
    }
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}

================
File: src/app/api/progress-posts/[id]/comments/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
// GET /api/progress-posts/[id]/comments - fetch comments for a progress post
export async function GET(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
// POST /api/progress-posts/[id]/comments - create a new comment
export async function POST(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
// Validation
⋮----
// Verify progress post exists and is from a published project
⋮----
// Create comment

================
File: src/app/api/progress-posts/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
// GET /api/progress-posts?take=10&cursor=<id>
export async function GET(req: NextRequest)
⋮----
take: take + 1, // grab one extra to know if there’s more
⋮----
// POST /api/progress-posts - create new progress post
export async function POST(req: NextRequest)
⋮----
// Validation
⋮----
// Verify project exists and user owns it
⋮----
// Create progress post

================
File: src/app/api/projects/[id]/milestones/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { calculateProgressFromMilestones } from "@/lib/milestone-utils";
⋮----
// POST - Add a new milestone
export async function POST(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
// Verify project ownership
⋮----
// Check milestone limit (max 10)
⋮----
// Get next order number
⋮----
// Create milestone
⋮----
// Recalculate progress
⋮----
// PATCH - Toggle milestone completion or update milestone
export async function PATCH(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
// Verify project ownership
⋮----
// Update milestone
⋮----
// Recalculate progress
⋮----
// DELETE - Remove a milestone
export async function DELETE(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
// Verify project ownership and check milestone count
⋮----
// Prevent deleting if only 1 milestone remains
⋮----
// Delete milestone
⋮----
// Recalculate progress

================
File: src/app/api/projects/[id]/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { calculateProgressFromMilestones } from "@/lib/milestone-utils";
⋮----
// PUT - Update existing project
export async function PUT(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
milestones, // Add milestones
⋮----
// Verify project ownership
⋮----
// Validation (same as create)
⋮----
// Update project with tags and milestones
⋮----
// Update tags - remove old ones and add new ones
⋮----
// Update milestones - remove old ones and add new ones
⋮----
// Calculate and update progress
⋮----
// DELETE - Delete project (optional, if you want users to delete projects)
export async function DELETE(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
)
⋮----
// Verify project ownership
⋮----
// Delete project (this will cascade delete related records)

================
File: src/app/login/error/login-error-content.tsx
================
import { useSearchParams } from "next/navigation";
import { useState, useEffect } from "react";
import { signIn } from "next-auth/react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
⋮----
interface UserAuthMethods {
  hasPassword: boolean;
  oauthProviders: string[];
  email: string;
}
⋮----
// Fetch user's existing authentication methods
⋮----
const fetchUserAuthMethods = async () =>
⋮----
const handlePasswordSignIn = async (e: React.FormEvent) =>
⋮----
// The user is now logged in, we can link the OAuth account
⋮----
const linkOAuthAccount = async () =>
⋮----
// Trigger the OAuth flow again, now that user is authenticated
⋮----
const handleExistingOAuthSignIn = async (provider: string) =>
⋮----
{/* Show password option only if user has a password */}
⋮----
{/* Show existing OAuth providers */}
⋮----
{/* Password reset option (only if user has password) */}

================
File: src/components/milestone-input.tsx
================
import { useState, useCallback, useRef, useEffect } from "react";
import { format } from "date-fns";
import { DndProvider, useDrag, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Calendar as CalendarIcon,
  Target,
  Plus,
  Trash2,
  GripVertical,
  Sparkles,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { cn } from "@/lib/utils";
import {
  MILESTONE_TEMPLATES,
  getMilestoneTemplatesByCategory,
  calculateSuggestedDate,
  type MilestoneTemplate,
} from "@/lib/milestone-templates";
⋮----
interface Milestone {
  title: string;
  description: string;
  targetDate: string;
  isCompleted: boolean;
  isFromTemplate?: boolean;
  templateId?: string;
}
⋮----
interface MilestoneInputProps {
  milestones: Milestone[];
  onChange: (milestones: Milestone[]) => void;
  minMilestones?: number;
  maxMilestones?: number;
}
⋮----
interface DragItem {
  index: number;
  type: string;
}
⋮----
interface DraggableMilestoneProps {
  milestone: Milestone;
  index: number;
  onUpdate: (
    index: number,
    field: keyof Milestone,
    value: string | boolean
  ) => void;
  onRemove: (index: number) => void;
  onMove: (dragIndex: number, hoverIndex: number) => void;
  canRemove: boolean;
  totalMilestones: number;
}
⋮----
// Connect drag and drop to the main container
⋮----
// Connect drag to the handle and preview to the entire element
⋮----
// Convert string date to Date object for the calendar
⋮----
const handleDateSelect = (date: Date | undefined) =>
⋮----
// Convert Date to YYYY-MM-DD string format
⋮----
onChange=
⋮----
className=
⋮----
const toggleCategory = (category: string) =>
⋮----
const handleSelectTemplate = (template: MilestoneTemplate) =>
⋮----
const handleMilestoneChange = (
    index: number,
    field: keyof Milestone,
    value: string | boolean
) =>
⋮----
// Remove template flag if user modifies a template-based milestone
⋮----
const addMilestone = () =>
⋮----
const addFromTemplate = (template: MilestoneTemplate) =>
⋮----
const removeMilestone = (index: number) =>

================
File: src/components/progress-post-card.tsx
================
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import Image from "next/image";
import { ProgressPostComments } from "./progress-post-comments";
⋮----
interface ProgressPostCardProps {
  post: {
    id: string;
    title: string;
    createdAt: Date;
    content: string;
    author: { id: string; name: string | null; image: string | null };
    project: {
      id: string;
      title: string;
      imageUrl: string | null;
      progress: number;
      tags: { tag: { id: string; name: string; color: string | null } }[];
    };
  };
}
⋮----
/* eslint-disable-next-line @next/next/no-img-element */

================
File: src/components/progress-post-comments.tsx
================
import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { formatDistanceToNow } from "date-fns";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Card, CardContent } from "@/components/ui/card";
import { MessageCircle, Send, LogIn } from "lucide-react";
import { toast } from "sonner";
import Link from "next/link";
⋮----
interface Comment {
  id: string;
  content: string;
  createdAt: string;
  author: {
    id: string;
    name: string | null;
    image: string | null;
  };
}
⋮----
interface ProgressPostCommentsProps {
  progressPostId: string;
  className?: string;
}
⋮----
// Fetch comments
const fetchComments = async () =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
{/* Comment Toggle Button */}
⋮----
{/* Comments Section */}
⋮----
{/* Comment Form */}
⋮----
{/* Comments List */}

================
File: src/components/progress-post-form.tsx
================
import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { toast } from "sonner";
import { Upload, X, PlusCircle } from "lucide-react";
import Image from "next/image";
⋮----
interface ProgressPostFormProps {
  projectId: string;
  projectTitle: string;
  trigger?: React.ReactNode;
}
⋮----
const handleInputChange = (field: string, value: string) =>
⋮----
const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
// In a real app, you'd upload to a service like Cloudinary
// For now, we'll use a data URL for preview
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Reset form
⋮----
// Refresh the page to show the new post
⋮----
const resetForm = () =>
⋮----
setOpen(newOpen);
⋮----
{/* Title */}
⋮----
onChange=
⋮----
{/* Content */}
⋮----
{/* Image Upload */}
⋮----
<Label>Progress Photo (optional)</Label>
                <div className="flex flex-col gap-4">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                    id="progress-image-upload"
                  />
                  <Label
                    htmlFor="progress-image-upload"
                    className="cursor-pointer"
                  >
                    <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                      <Upload className="h-4 w-4" />
                      Upload Progress Photo
                    </div>
                  </Label>
                </div>

                {imagePreview && (
                  <div className="relative w-full max-w-md">
                    <Image
                      src={imagePreview}
                      alt="Progress preview"
                      className="w-full h-48 object-cover rounded-lg border"
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      className="absolute top-2 right-2"
onClick=
⋮----
accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                    id="progress-image-upload"
                  />
                  <Label
                    htmlFor="progress-image-upload"
                    className="cursor-pointer"
                  >
                    <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                      <Upload className="h-4 w-4" />
                      Upload Progress Photo
                    </div>
                  </Label>
                </div>

                {imagePreview && (
                  <div className="relative w-full max-w-md">
                    <Image
                      src={imagePreview}
                      alt="Progress preview"
                      className="w-full h-48 object-cover rounded-lg border"
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      className="absolute top-2 right-2"
                      onClick={() => {
                        setImagePreview("");
                        setFormData((prev) => ({ ...prev, imageUrl: "" }));
                      }}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Submit Buttons */}

================
File: src/components/project-delete-dialog.tsx
================
import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { toast } from "sonner";
import { Trash2, AlertTriangle } from "lucide-react";
⋮----
interface ProjectDeleteDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  projectId: string;
  projectName: string;
}
⋮----
export function ProjectDeleteDialog({
  open,
  onOpenChange,
  projectId,
  projectName,
}: ProjectDeleteDialogProps)
⋮----
const resetForm = () =>
⋮----
const handleClose = () =>
⋮----
const handleDelete = async () =>
⋮----
// Redirect to my projects page after successful deletion
⋮----
onChange=

================
File: src/components/project-milestones.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
⋮----
import { useState } from "react";
import { formatDistanceToNow, format } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import {
  Calendar,
  CheckCircle2,
  Circle,
  Clock,
  AlertTriangle,
  Target,
} from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import { getMilestoneStatus } from "@/lib/milestone-utils";
⋮----
interface Milestone {
  id: string;
  title: string;
  description: string | null;
  targetDate: Date;
  isCompleted: boolean;
  completedAt: Date | null;
  order: number;
}
⋮----
interface ProjectMilestonesProps {
  projectId: string;
  milestones: Milestone[];
  progress: number;
  isOwner: boolean;
  className?: string;
}
⋮----
const handleMilestoneToggle = async (
    milestoneId: string,
    isCompleted: boolean
) =>
⋮----
const getMilestoneIcon = (milestone: Milestone) =>
⋮----
const getMilestoneStatusBadge = (milestone: Milestone) =>
⋮----

⋮----
className=
⋮----
{/* Milestone Icon */}
⋮----
{/* Milestone Content */}
⋮----
{/* Completion Checkbox (only for owners) */}
⋮----
{/* Progress Summary */}

================
File: src/components/project-progress-posts.tsx
================
import { formatDistanceToNow } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
⋮----
interface ProgressPost {
  id: string;
  title: string;
  content: string;
  imageUrl: string | null;
  createdAt: Date;
  author: {
    id: string;
    name: string | null;
    image: string | null;
  };
}
⋮----
interface ProjectProgressPostsProps {
  posts: ProgressPost[];
}

================
File: src/components/ui/calendar.tsx
================
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"
⋮----
import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
⋮----
className=
⋮----
function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>)
⋮----
data-day=

================
File: src/components/ui/checkbox.tsx
================
import { CheckIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>)
⋮----
className=

================
File: src/components/ui/collapsible.tsx
================
function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>)
⋮----
function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>)
⋮----
function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>)

================
File: src/components/ui/popover.tsx
================
import { cn } from "@/lib/utils"
⋮----
function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>)
⋮----
function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>)
⋮----
function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>)

================
File: src/lib/milestone-templates.ts
================
export interface MilestoneTemplate {
  id: string;
  name: string;
  description: string;
  suggestedDuration: number; // days from project start
  category: "planning" | "development" | "testing" | "launch" | "review";
  icon: string;
}
⋮----
suggestedDuration: number; // days from project start
⋮----
export function getMilestoneTemplatesByCategory()
⋮----
export function calculateSuggestedDate(
  startDate: Date,
  daysFromStart: number
): string
⋮----
return date.toISOString().split("T")[0]; // Return YYYY-MM-DD format

================
File: src/lib/milestone-utils.ts
================
interface Milestone {
  id: string;
  title: string;
  targetDate: Date;
  isCompleted: boolean;
  completedAt: Date | null;
  order: number;
}
⋮----
export function calculateProgressFromMilestones(
  milestones: Milestone[]
): number
⋮----
// If all milestones are completed, return 100%
⋮----
// Base progress from completed milestones
const completionWeight = totalMilestones > 0 ? 80 / totalMilestones : 0; // 80% for completion
⋮----
// Find the next incomplete milestone
⋮----
// Time-based progress for the current milestone (20% max)
⋮----
// Use the last completed milestone as reference
⋮----
// First milestone - assume project started 30 days before first milestone
⋮----
export function getNextMilestone(milestones: Milestone[]): Milestone | null
⋮----
export function getMilestoneStatus(
  milestone: Milestone
): "completed" | "overdue" | "upcoming" | "current"

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
⋮----
const compat = new FlatCompat({
⋮----
...compat.extends("next/core-web-vitals", "next/typescript"),

================
File: next.config.ts
================
import type { NextConfig } from "next";
⋮----
/* config options here */

================
File: postcss.config.mjs
================


================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/add-password/add-password-form.tsx
================
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { signIn } from "next-auth/react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { Session } from "next-auth";
⋮----
interface UserAuthMethods {
  hasPassword: boolean;
  oauthProviders: string[];
  email: string;
}
⋮----
interface AddPasswordFormProps {
  session: Session
}
⋮----
const email = session.user.email; // Get email from session prop
⋮----
}, []); // Remove email dependency since it's now from props
⋮----
const fetchUserAuthMethods = async () =>
⋮----
// If user already has a password, redirect to login
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Automatically sign them in with the new password
⋮----
const handleOAuthSignIn = async (provider: string) =>
⋮----
{/* Rest of your component remains the same */}

================
File: src/app/add-password/page.tsx
================
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { redirect } from "next/navigation";
import AddPasswordForm from "./add-password-form";
⋮----
export default async function AddPasswordPage()
⋮----
// Only redirect if NOT authenticated - we need them to be logged in

================
File: src/app/api/add-password/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/db";
⋮----
export async function POST(req: NextRequest)
⋮----
// Find the user
⋮----
// Check if user already has a password
⋮----
// Verify user has at least one OAuth account (security check)
⋮----
// Hash the new password
⋮----
// Update the user with the new password

================
File: src/app/api/auth/[...nextauth]/route.ts
================
import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth";

================
File: src/app/api/change-password/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/db";
⋮----
export async function POST(req: NextRequest)
⋮----
// Find the user
⋮----
// Check if user has a password (not OAuth-only)
⋮----
// Verify current password
⋮----
// Check if new password is different from current
⋮----
// Hash new password
⋮----
// Update password in database

================
File: src/app/api/check-user-auth-methods/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";
⋮----
export async function POST(req: NextRequest)

================
File: src/app/api/link-account/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
export async function POST(req: NextRequest)
⋮----
// Link the OAuth account to the existing user

================
File: src/app/api/projects/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { calculateProgressFromMilestones } from "@/lib/milestone-utils";
⋮----
// POST - Create new project
export async function POST(req: NextRequest)
⋮----
milestones, // Add milestones array
⋮----
// Validation
⋮----
// Validate milestone dates are in order
⋮----
// Create project with tags and milestones
⋮----
progress: 0, // Will be calculated after milestones are created
⋮----
// Calculate and update progress based on milestones

================
File: src/app/api/register/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/db";
⋮----
export async function POST(req: NextRequest)
⋮----
// Check if user already exists
⋮----
// Hash password
⋮----
// Create user

================
File: src/app/api/tags/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
// GET - Fetch all tags
export async function GET()
⋮----
// POST - Create new tag
export async function POST(req: NextRequest)
⋮----
// Check if tag already exists
⋮----
// Create new tag
⋮----
function generateRandomColor(): string

================
File: src/app/api/user/linked-accounts/route.ts
================
import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
export async function GET()

================
File: src/app/api/user/profile/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
// GET - Fetch user profile
export async function GET()
⋮----
// ✅ Remove 'include' and use only 'select'
⋮----
// PUT - Update user profile
export async function PUT(req: NextRequest)
⋮----
// Validation
⋮----
// URL validation for website
⋮----
// Update user profile
⋮----
// ✅ Remove 'include' and use only 'select'

================
File: src/app/api/user/unlink-account/route.ts
================
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
⋮----
export async function POST(req: NextRequest)
⋮----
// Get user with all accounts
⋮----
// Check if this is the account they're currently signed in with
⋮----
// Count remaining auth methods after unlinking
⋮----
// Prevent unlinking the only authentication method
⋮----
// Remove the account
⋮----
// If they're unlinking their current session provider, invalidate all sessions
⋮----
// Delete all user sessions to force re-authentication

================
File: src/app/create/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import ProjectForm from "./project-form";
⋮----
export default async function CreateProjectPage()

================
File: src/app/create/project-form.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
⋮----
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Session } from "next-auth";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { toast } from "sonner";
import { X, Plus, Upload } from "lucide-react";
import Image from "next/image";
import { MilestoneInput } from "@/components/milestone-input";
⋮----
interface ProjectFormProps {
  session: Session;
}
⋮----
interface Tag {
  id: string;
  name: string;
  slug: string;
  color: string | null;
  createdAt: Date;
}
⋮----
interface Milestone {
  title: string;
  description: string;
  targetDate: string;
  isCompleted: boolean;
}
⋮----
// Form state
⋮----
// Milestone state - initialize with one empty milestone
⋮----
// Fetch available tags
⋮----
const fetchTags = async () =>
⋮----
const handleInputChange = (field: string, value: any) =>
⋮----
const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const addTag = (tag: Tag) =>
⋮----
const removeTag = (tagId: string) =>
⋮----
const createNewTag = async () =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Milestone validation
⋮----
// Validate milestone dates are in chronological order
⋮----
milestones: milestones, // Add milestones to the request
⋮----
{/* Basic Information */}
⋮----
onChange=
⋮----
handleInputChange("description", e.target.value)
⋮----
{/* Image Upload */}
⋮----
accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="image-upload"
                />
                <Label htmlFor="image-upload" className="cursor-pointer">
                  <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                    <Upload className="h-4 w-4" />
                    Upload Image
                  </div>
                </Label>
              </div>

              {imagePreview && (
                <div className="relative w-full max-w-md">
                  <Image
                    src={imagePreview}
                    alt="Project preview"
                    width={400}
                    height={192}
                    className="w-full h-48 object-cover rounded-lg border"
                  />
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    className="absolute top-2 right-2"
                    onClick={() => {
                      setImagePreview("");
                      setFormData((prev) => ({ ...prev, imageUrl: "" }));
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Tags */}
⋮----
{/* Selected Tags */}
⋮----
{/* Available Tags */}
⋮----
{/* Create New Tag */}
⋮----
{/* Milestones - Replace the Project Details section */}
⋮----
{/* Project Settings */}
⋮----
{/* Publishing Options */}
⋮----
handleInputChange("isPublished", checked)
⋮----
Publish immediately (make it visible to everyone)
⋮----
{/* Submit Buttons */}

================
File: src/app/login/error/page.tsx
================
import { Suspense } from "react";
import LoginErrorContent from "./login-error-content"; // Move your current component logic here
⋮----
export default function LoginErrorPage()

================
File: src/app/login/page.tsx
================
import { redirectIfAuthenticated } from "@/lib/auth-utils";
import LoginForm from "./login-form";
⋮----
export default async function LoginPage()

================
File: src/app/my-projects/my-projects-list.tsx
================
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Plus, Edit, Eye, MessageCircle, Calendar, Clock } from "lucide-react";
import Image from "next/image";
⋮----
interface Project {
  id: string;
  title: string;
  description: string | null;
  imageUrl: string | null;
  status: string;
  progress: number;
  difficulty: string;
  estimatedHours: number | null;
  isPublished: boolean;
  createdAt: Date;
  updatedAt: Date;
  tags: Array<{
    tag: {
      id: string;
      name: string;
      color: string | null;
    };
  }>;
  _count: {
    comments: number;
  };
}
⋮----
interface MyProjectsListProps {
  projects: Project[];
}
⋮----
{/* Status and Progress */}
⋮----
{/* Tags */}
⋮----
{/* Meta Information */}
⋮----
{/* Actions */}

================
File: src/app/my-projects/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import { prisma } from "@/lib/db";
import MyProjectsList from "./my-projects-list";
⋮----
async function getUserProjects(userId: string)
⋮----
export default async function MyProjectsPage()

================
File: src/app/projects/[id]/edit/not-found.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
⋮----
export default function EditProjectNotFound()

================
File: src/app/projects/[id]/edit/page.tsx
================
import { notFound } from "next/navigation";
import { prisma } from "@/lib/db";
import { requireAuth } from "@/lib/auth-utils";
import ProjectEditForm from "./project-edit-form";
⋮----
interface ProjectEditPageProps {
  params: Promise<{
    id: string;
  }>;
}
⋮----
async function getProject(id: string, userId: string)
⋮----
// Add milestones to the query
⋮----
// Ensure user can only edit their own projects
⋮----
export default async function ProjectEditPage({
  params,
}: ProjectEditPageProps)
⋮----
// Fix: Await params before accessing its properties

================
File: src/app/projects/[id]/edit/project-edit-form.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
⋮----
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { toast } from "sonner";
import { X, Plus, Upload, ArrowLeft, Trash2 } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { ProjectDeleteDialog } from "@/components/project-delete-dialog";
import { MilestoneInput } from "@/components/milestone-input";
⋮----
interface Tag {
  id: string;
  name: string;
  slug: string;
  color: string | null;
  createdAt: Date;
}
⋮----
interface Milestone {
  id: string;
  title: string;
  description: string | null;
  targetDate: Date;
  isCompleted: boolean;
  completedAt: Date | null;
  order: number;
}
⋮----
interface Project {
  id: string;
  title: string;
  description: string | null;
  content: string;
  imageUrl: string | null;
  status: string;
  progress: number;
  difficulty: string;
  isPublished: boolean;
  tags: Array<{
    tag: Tag;
  }>;
  milestones: Milestone[]; // Add milestones to project interface
}
⋮----
milestones: Milestone[]; // Add milestones to project interface
⋮----
interface ProjectEditFormProps {
  project: Project;
}
⋮----
interface MilestoneInputType {
  title: string;
  description: string;
  targetDate: string;
  isCompleted: boolean;
}
⋮----
// Form state initialized with project data
⋮----
// Initialize milestones from project data
⋮----
targetDate: m.targetDate.toISOString().split("T")[0], // Convert to YYYY-MM-DD format
⋮----
// Fetch available tags
⋮----
const fetchTags = async () =>
⋮----
const handleInputChange = (field: string, value: any) =>
⋮----
const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const addTag = (tag: Tag) =>
⋮----
const removeTag = (tagId: string) =>
⋮----
const createNewTag = async () =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Milestone validation
⋮----
// Validate milestone dates are in chronological order
⋮----
milestones: milestones, // Add milestones to the request
⋮----
{/* Basic Information */}
⋮----
onChange=
⋮----
handleInputChange("description", e.target.value)
⋮----
{/* Image Upload */}
⋮----
accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="image-upload"
                />
                <Label htmlFor="image-upload" className="cursor-pointer">
                  <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                    <Upload className="h-4 w-4" />
                    {imagePreview ? "Change Image" : "Upload Image"}
                  </div>
                </Label>
              </div>

              {imagePreview && (
                <div className="relative w-full max-w-md">
                  <Image
                    src={imagePreview}
                    alt="Project preview"
                    width={400}
                    height={192}
                    className="w-full h-48 object-cover rounded-lg border"
                  />
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    className="absolute top-2 right-2"
                    onClick={() => {
                      setImagePreview("");
                      setFormData((prev) => ({ ...prev, imageUrl: "" }));
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Tags */}
⋮----
{/* Selected Tags */}
⋮----
{/* Available Tags */}
⋮----
{/* Create New Tag */}
⋮----
{/* Milestones - Replace the estimated/actual hours section */}
⋮----
{/* Project Settings */}
⋮----
{/* Publishing Options */}
⋮----
handleInputChange("isPublished", checked)
⋮----
<Label htmlFor="publish">Published (visible to everyone)</Label>
⋮----
{/* Submit Buttons */}
⋮----
{/* Delete Confirmation Dialog */}

================
File: src/app/projects/[id]/not-found.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
⋮----
export default function ProjectNotFound()

================
File: src/app/projects/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { prisma } from "@/lib/db";
import ProjectView from "./project-view";
⋮----
interface ProjectPageProps {
  params: Promise<{
    id: string;
  }>;
}
⋮----
async function getProject(id: string)
⋮----
// Add progress posts if you want them
⋮----
// Fix the _count - remove it for now or use proper syntax
⋮----
export default async function ProjectPage(
⋮----
// Fix: Await params before accessing its properties

================
File: src/app/projects/[id]/project-view.tsx
================
import { useSession } from "next-auth/react";
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import {
  Calendar,
  Clock,
  User,
  Edit,
  MessageCircle,
  ArrowLeft,
  Trash2,
} from "lucide-react";
import { ProgressPostForm } from "@/components/progress-post-form";
import Image from "next/image";
import { ProjectDeleteDialog } from "@/components/project-delete-dialog";
import { useState } from "react";
⋮----
interface ProjectViewProps {
  project: {
    id: string;
    title: string;
    description: string | null;
    content: string;
    imageUrl: string | null;
    status: string;
    progress: number;
    difficulty: string;
    estimatedHours: number | null;
    actualHours: number | null;
    isPublished: boolean;
    createdAt: Date;
    updatedAt: Date;
    author: {
      id: string;
      name: string | null;
      email: string;
    };
    tags: Array<{
      tag: {
        id: string;
        name: string;
        slug: string;
        color: string | null;
      };
    }>;
    comments: Array<{
      id: string;
      content: string;
      createdAt: Date;
      author: {
        id: string;
        name: string | null;
      };
    }>;
    // Add progress posts
    progressPosts: Array<{
      id: string;
      title: string;
      content: string;
      imageUrl: string | null;
      createdAt: Date;
      author: {
        id: string;
        name: string | null;
        image: string | null;
      };
    }>;
    _count: {
      comments: number;
    };
  };
}
⋮----
// Add progress posts
⋮----
{/* Main Content */}
⋮----
{/* Header with project title and actions */}
⋮----
{/* Add Progress Post button for project owners */}
⋮----
{/* Existing Edit button */}
⋮----
{/* Delete button */}
⋮----
{/* Project Image */}
⋮----
{/* Project Description */}
⋮----
{/* Project Content */}
⋮----
{/* Progress Posts Section */}
⋮----

⋮----
{/* Comments Section */}
⋮----
{/* Sidebar */}
⋮----
{/* Project Info */}
⋮----
{/* Author */}
⋮----
{/* Created Date */}
⋮----
{/* Status */}
⋮----
{/* Difficulty */}
⋮----
{/* Progress */}
⋮----
{/* Estimated Hours */}
⋮----
{/* Tags */}

================
File: src/app/register/page.tsx
================
import { redirectIfAuthenticated } from "@/lib/auth-utils";
import RegisterForm from "./register-form";
⋮----
export default async function RegisterPage()

================
File: src/app/register/register-form.tsx
================
import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { toast } from "sonner";
⋮----
export default function RegisterForm()
⋮----
const handleCredentialsSubmit = async (e: React.FormEvent) =>
⋮----
const handleSocialLogin = async (provider: string) =>
⋮----
{/* Social Login Buttons */}
⋮----
{/* Email Registration Form */}
⋮----
onChange=

================
File: src/app/settings/accounts/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import AccountsSettings from "./accounts-settings";
⋮----
export default async function AccountsPage()
⋮----
// Ensure user is authenticated before showing the page

================
File: src/app/settings/page.tsx
================
import { useEffect } from "react";
import { useRouter } from "next/navigation";
⋮----
export default function SettingsPage()
⋮----
// Redirect to profile settings by default

================
File: src/app/settings/profile/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import ProfileForm from "./profile-form";
⋮----
export default async function SettingsProfilePage()

================
File: src/app/settings/profile/profile-form.tsx
================
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Session } from "next-auth";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
⋮----
interface ProfileFormProps {
  session: Session;
}
⋮----
interface UserProfile {
  name: string;
  email: string;
  bio?: string;
  website?: string;
  location?: string;
  hasPassword: boolean;
  oauthProviders: string[];
  createdAt: string;
}
⋮----
// Form state
⋮----
// Fetch user profile on component mount
⋮----
const fetchProfile = async () =>
⋮----
// Set form fields
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
{/* Account Info Card */}
⋮----
{/* Profile Form */}

================
File: src/components/change-password-dialog.tsx
================
import { useState } from "react";
import { useSession, signOut } from "next-auth/react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { toast } from "sonner";
⋮----
interface ChangePasswordDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}
⋮----
export function ChangePasswordDialog({
  open,
  onOpenChange,
}: ChangePasswordDialogProps)
⋮----
const resetForm = () =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
const handleClose = () =>
⋮----
onChange=

================
File: src/components/theme-toggle.tsx
================
import { Moon, Sun } from "lucide-react";
import { useState, useEffect } from "react";
import { cn } from "@/lib/utils";
⋮----
// Check for saved theme preference or default to 'light'
⋮----
const toggleTheme = () =>
⋮----
// Prevent hydration mismatch

================
File: src/components/ui/alert.tsx
================
import { cva, type VariantProps } from "class-variance-authority"
⋮----
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/avatar.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/badge.tsx
================
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
⋮----
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/button.tsx
================
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
⋮----
import { cn } from "@/lib/utils"

================
File: src/components/ui/card.tsx
================
import { cn } from "@/lib/utils"

================
File: src/components/ui/confirmation-dialog.tsx
================
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
⋮----
interface ConfirmationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  title: string;
  description: string;
  confirmText?: string;
  cancelText?: string;
  variant?: "default" | "destructive";
  onConfirm: () => void;
}
⋮----
export function ConfirmationDialog({
  open,
  onOpenChange,
  title,
  description,
  confirmText = "Confirm",
  cancelText = "Cancel",
  variant = "default",
  onConfirm,
}: ConfirmationDialogProps)
⋮----
const handleConfirm = () =>

================
File: src/components/ui/dialog.tsx
================
import { XIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>)
⋮----
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>)
⋮----
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>)
⋮----
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>)

================
File: src/components/ui/dropdown-menu.tsx
================
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>)
⋮----
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>)
⋮----
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>)
⋮----
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>)
⋮----
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>)
⋮----
className=
⋮----
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>)
⋮----
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>)
⋮----
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>)
⋮----
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
})

================
File: src/components/ui/form.tsx
================
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"
⋮----
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
⋮----
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
⋮----
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) =>
⋮----
const useFormField = () =>
⋮----
type FormItemContextValue = {
  id: string
}
⋮----
function FormItem(
⋮----
className=
⋮----
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>)
⋮----
function FormControl(
⋮----
function FormMessage(

================
File: src/components/ui/input.tsx
================
import { cn } from "@/lib/utils"
⋮----
function Input(
⋮----
className=

================
File: src/components/ui/label.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/progress.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/select.tsx
================
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>)
⋮----
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>)
⋮----
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>)
⋮----
function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
})
⋮----
className=
⋮----
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>)
⋮----
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>)
⋮----
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>)

================
File: src/components/ui/slider.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/sonner.tsx
================
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
⋮----
const Toaster = (

================
File: src/components/ui/switch.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/tabs.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/components/ui/textarea.tsx
================
import { cn } from "@/lib/utils"
⋮----
className=

================
File: src/hooks/use-confirmation-dialog.ts
================
import { useState } from "react";
⋮----
interface UseConfirmationDialogProps {
  title: string;
  description: string;
  confirmText?: string;
  cancelText?: string;
  variant?: "default" | "destructive";
}
⋮----
export function useConfirmationDialog()
⋮----
const confirm = (props: UseConfirmationDialogProps): Promise<boolean> =>
⋮----
// Handle cancel/close
const handleCancel = () =>
⋮----
// Store cancel handler for later use

================
File: src/lib/auth-utils.ts
================
import { redirect } from "next/navigation";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
⋮----
export async function requireAuth()
⋮----
export async function redirectIfAuthenticated()

================
File: src/lib/db.ts
================
import { PrismaClient } from "@prisma/client";

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
⋮----
export function cn(...inputs: ClassValue[])

================
File: src/types/next-auth.d.ts
================
import { DefaultSession } from "next-auth";
⋮----
interface Session {
    user: {
      id: string;
    } & DefaultSession["user"];
  }
⋮----
interface User {
    id: string;
  }
⋮----
interface JWT {
    id: string;
  }

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/src/generated/prisma

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  bio           String? // Add bio field
  website       String? // Add website field
  location      String? // Add location field
  projects      Project[]
  progressPosts ProgressPost[]
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String?
  content       String         @db.Text
  imageUrl      String?
  status        ProjectStatus  @default(PLANNING)
  progress      Int            @default(0) // Auto-calculated from milestones
  difficulty    Difficulty
  isPublished   Boolean        @default(false)
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags          ProjectTag[]
  comments      Comment[]
  progressPosts ProgressPost[]
  milestones    Milestone[] // Flexible number of milestones
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("projects")
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int // Dynamic ordering, not fixed 1-5
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([projectId, order])
  @@map("milestones")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  color     String? // Hex color for the tag
  projects  ProjectTag[]
  createdAt DateTime     @default(now())

  @@map("tags")
}

model ProjectTag {
  id        String  @id @default(cuid())
  projectId String
  tagId     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagId])
  @@map("project_tags")
}

model ProgressPost {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  imageUrl  String?
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  @@map("progress_posts")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Comment {
  id             String        @id @default(cuid())
  content        String
  authorId       String
  projectId      String?
  progressPostId String?
  author         User          @relation(fields: [authorId], references: [id])
  project        Project?      @relation(fields: [projectId], references: [id])
  progressPost   ProgressPost? @relation(fields: [progressPostId], references: [id])
  createdAt      DateTime      @default(now())
}

================
File: src/app/login/login-form.tsx
================
import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
⋮----
interface OAuthOnlyError {
  type: string;
  email: string;
  providers: string[];
}
⋮----
const handleCredentialsSubmit = async (e: React.FormEvent) =>
⋮----
// Not a JSON error, handle as normal
⋮----
window.location.href = "/"; // Use window.location instead of router
⋮----
const handleSocialLogin = async (
    provider: string,
    redirectToSettings = false
) =>
⋮----
const clearOAuthError = () =>
⋮----
{/* Enhanced OAuth-only Account Error */}
⋮----
{/* Only show social login and email form if no OAuth-only error */}
⋮----
{/* Social Login Buttons */}
⋮----
{/* Email/Password Form */}

================
File: src/app/settings/accounts/accounts-settings.tsx
================
import { useSession, signOut } from "next-auth/react";
import { useState, useEffect } from "react";
import { signIn } from "next-auth/react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { ConfirmationDialog } from "@/components/ui/confirmation-dialog";
import { ChangePasswordDialog } from "@/components/change-password-dialog";
import { useConfirmationDialog } from "@/hooks/use-confirmation-dialog";
import { toast } from "sonner";
⋮----
interface LinkedAccount {
  provider: string;
  email?: string;
  linkedAt: string;
}
⋮----
interface UserAuthMethods {
  hasPassword: boolean;
  oauthProviders: string[];
  email: string;
}
⋮----
// Handle welcome message from OAuth-only error flow
⋮----
const fetchLinkedAccounts = async () =>
⋮----
const fetchUserAuthMethods = async () =>
⋮----
const linkAccount = async (provider: string) =>
⋮----
const unlinkAccount = async (provider: string) =>
⋮----
const isLinked = (provider: string)
⋮----
{/* Google Account */}
⋮----
{/* GitHub Account */}
⋮----
{/* Password Management Section */}
⋮----
{/* Add Password - Only show if user doesn't have a password */}
⋮----
{/* Change Password - Only show if user has a password */}
⋮----
{/* Render dialogs */}

================
File: src/app/settings/layout.tsx
================
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";
⋮----
{/* Settings Navigation */}
⋮----
{/* Settings Content */}

================
File: src/components/navbar.tsx
================
import { useSession, signOut } from 'next-auth/react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { ThemeToggle } from "@/components/theme-toggle";

================
File: src/components/providers.tsx
================
import { SessionProvider } from 'next-auth/react'
import { ThemeProvider } from 'next-themes'
import { ReactNode } from 'react'
⋮----
interface ProvidersProps {
  children: ReactNode
}
⋮----
export function Providers(
⋮----
{/* <ThemeProvider
        attribute="class"
        defaultTheme="system"
        enableSystem
        disableTransitionOnChange
      >
        {children}
      </ThemeProvider> */}

================
File: src/lib/auth.ts
================
// src/lib/auth.ts
import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import GitHubProvider from "next-auth/providers/github";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import { prisma } from "@/lib/db";
import bcrypt from "bcryptjs";
⋮----
async authorize(credentials)
⋮----
strategy: "jwt", // ✅ Change from 'database' to 'jwt'
⋮----
async jwt(
⋮----
// Store user data in JWT token
⋮----
async session(
⋮----
// Pass user data from JWT token to session
⋮----
async signIn(
⋮----
// Allow credentials sign-in
⋮----
// Handle OAuth account linking (your existing logic)

================
File: package.json
================
{
  "name": "diy-tech-hub",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:push": "dotenv -e .env.local -- npx prisma db push",
    "db:push-force": "dotenv -e .env.local -- npx prisma db push --force-reset",
    "db:pull": "dotenv -e .env.local -- npx prisma db pull",
    "prisma:generate": "dotenv -e .env.local -- npx prisma generate",
    "prisma:studio": "dotenv -e .env.local -- npx prisma studio",
    "migrate:dev": "dotenv -e .env.local -- npx prisma migrate dev"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.0",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.12.0",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "cloudinary": "^2.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv-cli": "^9.0.0",
    "lucide-react": "^0.526.0",
    "next": "15.4.4",
    "next-auth": "^4.24.11",
    "next-themes": "^0.4.6",
    "prisma": "^6.12.0",
    "react": "19.1.0",
    "react-day-picker": "^9.8.1",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.61.1",
    "sonner": "^2.0.6",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.0.10"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.4",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.6",
    "typescript": "^5"
  }
}

================
File: src/app/globals.css
================
/* @import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

html {
  scrollbar-gutter: stable;
}


@supports not (scrollbar-gutter: stable) {
  html {
    overflow-y: scroll;
  }
}


body {
  min-height: 100vh;
}


::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: hsl(var(--muted) / 0.1);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--border));
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.5);
}

html {
  scrollbar-width: thin;
  scrollbar-color: hsl(var(--border)) hsl(var(--muted) / 0.1);
} */
⋮----
@theme inline {
⋮----
:root {
⋮----
/* Light theme colors */
⋮----
/* Shadow variables for light theme */
⋮----
/* Chart colors */
⋮----
/* Sidebar colors */
⋮----
.dark {
⋮----
/* Dark theme colors */
⋮----
--border: oklch(0.3 0 0); /* Fixed: More subtle border for dark theme */
--input: oklch(0.3 0 0); /* Fixed: More subtle input border */
⋮----
/* Shadow variables for dark theme */
⋮----
--sidebar-border: oklch(0.3 0 0); /* Fixed: More subtle sidebar border */
⋮----
@layer base {
⋮----
* {
⋮----
@apply border-border;
⋮----
body {
⋮----
/* Apply shadows to common elements */
.shadow-sm {
⋮----
.shadow-lg {
⋮----
.shadow-xl {
⋮----
/* Prevent scrollbar flickering */
html {
⋮----
/* Fallback for older browsers */
⋮----
/* Theme-aware scrollbar */
::-webkit-scrollbar {
⋮----
::-webkit-scrollbar-track {
⋮----
::-webkit-scrollbar-thumb {
⋮----
::-webkit-scrollbar-thumb:hover {
⋮----
/* Firefox */

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
⋮----
import { cn } from "@/lib/utils";
import { Toaster } from "sonner";
import { Providers } from "@/components/providers";
import { Navbar } from "@/components/navbar";

================
File: src/app/page.tsx
================
import { prisma } from "@/lib/db";
import { ProgressPostCard } from "@/components/progress-post-card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
⋮----
export const revalidate = 60; // ISR every minute
⋮----
/* --- Fetch --- */
⋮----
// Include comment count
⋮----
/* --- Layout --- */
⋮----
{/* Feed */}
⋮----
{/* Sidebar */}
⋮----
{/* Tags */}
⋮----
{/* Popular Projects */}




================================================================
End of Codebase
================================================================
