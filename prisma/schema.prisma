generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  bio           String? // Add bio field
  website       String? // Add website field
  location      String? // Add location field
  projects      Project[]
  progressPosts ProgressPost[]
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String?
  content       String         @db.Text
  imageUrl      String?
  status        ProjectStatus  @default(PLANNING)
  progress      Int            @default(0) // Auto-calculated from milestones
  difficulty    Difficulty
  isPublished   Boolean        @default(false)
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags          ProjectTag[]
  comments      Comment[]
  progressPosts ProgressPost[]
  milestones    Milestone[] // Flexible number of milestones
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("projects")
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int // Dynamic ordering, not fixed 1-5
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([projectId, order])
  @@map("milestones")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  color     String? // Hex color for the tag
  projects  ProjectTag[]
  createdAt DateTime     @default(now())

  @@map("tags")
}

model ProjectTag {
  id        String  @id @default(cuid())
  projectId String
  tagId     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagId])
  @@map("project_tags")
}

model ProgressPost {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  imageUrl  String?
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  @@map("progress_posts")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Comment {
  id             String        @id @default(cuid())
  content        String
  authorId       String
  projectId      String?
  progressPostId String?
  author         User          @relation(fields: [authorId], references: [id])
  project        Project?      @relation(fields: [projectId], references: [id])
  progressPost   ProgressPost? @relation(fields: [progressPostId], references: [id])
  createdAt      DateTime      @default(now())
}
