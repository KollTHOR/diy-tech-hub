This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.gitignore
.repomixignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
prisma/schema.prisma
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
repomix.config.json
src/app/add-password/add-password-form.tsx
src/app/add-password/page.tsx
src/app/api/add-password/route.ts
src/app/api/auth/[...nextauth]/route.ts
src/app/api/change-password/route.ts
src/app/api/check-user-auth-methods/route.ts
src/app/api/link-account/route.ts
src/app/api/progress-posts/[id]/comments/route.ts
src/app/api/progress-posts/route.ts
src/app/api/projects/[id]/milestones/route.ts
src/app/api/projects/[id]/route.ts
src/app/api/projects/route.ts
src/app/api/register/route.ts
src/app/api/tags/route.ts
src/app/api/user/linked-accounts/route.ts
src/app/api/user/profile/route.ts
src/app/api/user/unlink-account/route.ts
src/app/create/page.tsx
src/app/create/project-form.tsx
src/app/create/tabs/basic-info-tab.tsx
src/app/create/tabs/milestones-tab.tsx
src/app/create/tabs/settings-tab.tsx
src/app/create/tabs/tags-tab.tsx
src/app/globals.css
src/app/layout.tsx
src/app/login/error/login-error-content.tsx
src/app/login/error/page.tsx
src/app/login/login-form.tsx
src/app/login/page.tsx
src/app/my-projects/my-projects-list.tsx
src/app/my-projects/page.tsx
src/app/page.tsx
src/app/projects/[id]/edit/not-found.tsx
src/app/projects/[id]/edit/page.tsx
src/app/projects/[id]/edit/project-edit-form.tsx
src/app/projects/[id]/not-found.tsx
src/app/projects/[id]/page.tsx
src/app/projects/[id]/project-view.tsx
src/app/register/page.tsx
src/app/register/register-form.tsx
src/app/settings/accounts/accounts-settings.tsx
src/app/settings/accounts/page.tsx
src/app/settings/layout.tsx
src/app/settings/page.tsx
src/app/settings/profile/page.tsx
src/app/settings/profile/profile-form.tsx
src/components/change-password-dialog.tsx
src/components/icon-selector.tsx
src/components/milestone-input.tsx
src/components/milestone-item.tsx
src/components/milestone-template-selector.tsx
src/components/navbar.tsx
src/components/progress-post-card.tsx
src/components/progress-post-comments.tsx
src/components/progress-post-form.tsx
src/components/project-delete-dialog.tsx
src/components/project-milestone-progress-bar.tsx
src/components/project-milestones.tsx
src/components/project-progress-posts.tsx
src/components/providers.tsx
src/components/theme-toggle.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/collapsible.tsx
src/components/ui/confirmation-dialog.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/form.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/popover.tsx
src/components/ui/progress.tsx
src/components/ui/select.tsx
src/components/ui/slider.tsx
src/components/ui/sonner.tsx
src/components/ui/switch.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/components/ui/tooltip.tsx
src/hooks/use-confirmation-dialog.ts
src/hooks/use-project-form.ts
src/lib/auth-utils.ts
src/lib/auth.ts
src/lib/db.ts
src/lib/milestone-templates.ts
src/lib/milestone-utils.tsx
src/lib/utils.ts
src/types/next-auth.d.ts
src/types/project.ts
tsconfig.json

================================================================
Files
================================================================

================
File: src/lib/milestone-utils.tsx
================
// src/lib/milestone-utils.ts
import React from "react";
import {
  ClipboardList,
  Brush,
  Rocket,
  Settings,
  CheckCircle,
  Search,
  MessageCircle,
  Eye,
  Flag,
  BarChart2,
  Target,
  CheckCircle2,
  Circle,
  AlertTriangle,
} from "lucide-react";
import { MILESTONE_TEMPLATES } from "@/lib/milestone-templates";
import type { Milestone } from "@/types/project";


interface MilestoneForCalculation {
  targetDate: Date;
  isCompleted: boolean;
  completedAt?: Date | null;
}

const ICON_OPTIONS: Record<
  string,
  React.ComponentType<{ className?: string }>
> = {
  ClipboardList,
  Brush,
  Rocket,
  Settings,
  CheckCircle,
  Search,
  MessageCircle,
  Eye,
  Flag,
  BarChart2,
  Target,
};

/**
 * Main function to get milestone icon based on type and properties
 * Handles both template milestones and custom milestones
 */
export function getMilestoneIcon(
  milestone: Milestone,
  className: string = "w-5 h-5"
): React.ReactElement {
  // For template milestones, use template icon
  if (milestone.isFromTemplate && milestone.templateId) {
    const template = MILESTONE_TEMPLATES.find(
      (t) => t.id === milestone.templateId
    );
    if (template?.icon) {
      const Icon = template.icon;
      return <Icon className={className} />;
    }
  }

  // For custom milestones, use selected icon
  if (milestone.icon && ICON_OPTIONS[milestone.icon]) {
    const Icon = ICON_OPTIONS[milestone.icon];
    return <Icon className={className} />;
  }

  // Fallback to Target icon
  return <Target className={className} />;
}

/**
 * Get status-based milestone icon (completed, overdue, current, upcoming)
 * Used for showing milestone progress status
 */
export function getMilestoneStatusIcon(
  milestone: Milestone,
  className: string = "w-5 h-5"
): React.ReactElement {
  if (milestone.isCompleted) {
    return <CheckCircle2 className={`${className} text-green-600`} />;
  }

  const status = getMilestoneStatus(milestone);
  switch (status) {
    case "overdue":
      return <AlertTriangle className={`${className} text-red-500`} />;
    case "current":
      return <Target className={`${className} text-blue-500`} />;
    default:
      return <Circle className={`${className} text-muted-foreground`} />;
  }
}

export { ICON_OPTIONS };

/**
 * Render milestone icon by name - used by icon selector
 */
export function renderMilestoneIcon(
  iconName?: string,
  className: string = "w-5 h-5 text-primary"
): React.ReactElement {
  const IconComp = ICON_OPTIONS[iconName || ""] || ClipboardList;
  return <IconComp className={className} />;
}

export function calculateProgressFromMilestones(
  milestones: MilestoneForCalculation[]
): number {
  if (milestones.length === 0) return 0;

  const completedMilestones = milestones.filter((m) => m.isCompleted);
  const totalMilestones = milestones.length;

  // If all milestones are completed, return 100%
  if (completedMilestones.length === totalMilestones) {
    return 100;
  }

  // Base progress from completed milestones
  const completionWeight = totalMilestones > 0 ? 80 / totalMilestones : 0; // 80% for completion
  let progress = completedMilestones.length * completionWeight;

  // Find the next incomplete milestone
  const sortedMilestones = [...milestones].sort(
    (a, b) => a.targetDate.getTime() - b.targetDate.getTime()
  );
  const nextIncomplete = sortedMilestones.find((m) => !m.isCompleted);

  if (nextIncomplete) {
    // Time-based progress for the current milestone (20% max)
    const now = new Date();
    const currentMilestoneWeight = 20 / totalMilestones;

    // Use the last completed milestone as reference
    const lastCompleted = sortedMilestones
      .filter((m) => m.isCompleted)
      .sort((a, b) => a.targetDate.getTime() - b.targetDate.getTime())
      .pop();

    let startDate: Date;
    if (lastCompleted && lastCompleted.completedAt) {
      startDate = lastCompleted.completedAt;
    } else {
      // First milestone - assume project started 30 days before first milestone
      startDate = new Date(
        nextIncomplete.targetDate.getTime() - 30 * 24 * 60 * 60 * 1000
      );
    }

    const totalTime = nextIncomplete.targetDate.getTime() - startDate.getTime();
    const elapsedTime = now.getTime() - startDate.getTime();

    if (totalTime > 0 && elapsedTime > 0) {
      const timeProgress = Math.min(elapsedTime / totalTime, 1);
      progress += timeProgress * currentMilestoneWeight;
    }
  }

  return Math.min(Math.max(Math.round(progress), 0), 100);
}

export function getNextMilestone(
  milestones: MilestoneForCalculation[]
): MilestoneForCalculation | null {
  return (
    milestones
      .filter((m) => !m.isCompleted)
      .sort((a, b) => a.targetDate.getTime() - b.targetDate.getTime())[0] ||
    null
  );
}

// ✅ Add the missing getMilestoneStatus function
export function getMilestoneStatus(milestone: {
  targetDate: Date;
  isCompleted: boolean;
}): "completed" | "overdue" | "current" | "upcoming" {
  // If milestone is completed, return completed status
  if (milestone.isCompleted) {
    return "completed";
  }

  const now = new Date();
  const targetDate = new Date(milestone.targetDate);

  // Remove time component for date comparison
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const target = new Date(
    targetDate.getFullYear(),
    targetDate.getMonth(),
    targetDate.getDate()
  );

  // Check if milestone is overdue
  if (target < today) {
    return "overdue";
  }

  // Check if milestone is due soon (within next 7 days) - consider it "current"
  const daysUntilTarget = Math.ceil(
    (target.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)
  );

  if (daysUntilTarget <= 7) {
    return "current";
  }

  // Otherwise, it's upcoming
  return "upcoming";
}

// ✅ Optional: Add a helper to get milestone status with more detailed info
export function getMilestoneStatusDetails(milestone: {
  targetDate: Date;
  isCompleted: boolean;
  completedAt?: Date | null;
}) {
  const status = getMilestoneStatus(milestone);
  const now = new Date();
  const targetDate = new Date(milestone.targetDate);

  let daysFromTarget = 0;
  let message = "";

  if (milestone.isCompleted) {
    if (milestone.completedAt) {
      const completedDate = new Date(milestone.completedAt);
      const wasEarly = completedDate < targetDate;
      const daysDiff = Math.abs(
        Math.ceil(
          (targetDate.getTime() - completedDate.getTime()) /
            (1000 * 60 * 60 * 24)
        )
      );

      if (wasEarly && daysDiff > 0) {
        message = `Completed ${daysDiff} day${daysDiff > 1 ? "s" : ""} early`;
      } else if (!wasEarly && daysDiff > 0) {
        message = `Completed ${daysDiff} day${daysDiff > 1 ? "s" : ""} late`;
      } else {
        message = "Completed on time";
      }
    } else {
      message = "Completed";
    }
  } else {
    daysFromTarget = Math.ceil(
      (targetDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)
    );

    if (status === "overdue") {
      message = `${Math.abs(daysFromTarget)} day${
        Math.abs(daysFromTarget) > 1 ? "s" : ""
      } overdue`;
    } else if (status === "current") {
      if (daysFromTarget === 0) {
        message = "Due today";
      } else {
        message = `Due in ${daysFromTarget} day${
          daysFromTarget > 1 ? "s" : ""
        }`;
      }
    } else {
      message = `Due in ${daysFromTarget} day${daysFromTarget > 1 ? "s" : ""}`;
    }
  }

  return {
    status,
    daysFromTarget,
    message,
    isOverdue: status === "overdue",
    isDueSoon: status === "current",
    isCompleted: milestone.isCompleted,
  };
}

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: repomix.config.json
================
{
  "$schema": "https://repomix.com/schemas/latest/schema.json",
  "input": {
    "maxFileSize": 52428800
  },
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "files": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "compress": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "truncateBase64": false,
    "copyToClipboard": false,
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100,
      "includeDiffs": false
    }
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}

================
File: src/app/add-password/add-password-form.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { signIn } from "next-auth/react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { Session } from "next-auth";

interface UserAuthMethods {
  hasPassword: boolean;
  oauthProviders: string[];
  email: string;
}

interface AddPasswordFormProps {
  session: Session
}

export default function AddPasswordForm({ session }: AddPasswordFormProps) {
  const router = useRouter();
  const email = session.user.email; // Get email from session prop

  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [userMethods, setUserMethods] = useState<UserAuthMethods | null>(null);
  const [fetchingUser, setFetchingUser] = useState(true);

  useEffect(() => {
    fetchUserAuthMethods();
  }, []); // Remove email dependency since it's now from props

  const fetchUserAuthMethods = async () => {
    try {
      const response = await fetch("/api/check-user-auth-methods", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        const data = await response.json();
        setUserMethods(data);

        // If user already has a password, redirect to login
        if (data.hasPassword) {
          toast.info(
            "This account already has a password. Please sign in normally."
          );
          router.push("/login");
        }
      } else {
        toast.error("User not found");
        router.push("/login");
      }
    } catch (error) {
      console.error("Failed to fetch user auth methods:", error);
      toast.error("Something went wrong");
      router.push("/login");
    } finally {
      setFetchingUser(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (password !== confirmPassword) {
      toast.error("Passwords do not match");
      return;
    }

    if (password.length < 6) {
      toast.error("Password must be at least 6 characters");
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch("/api/add-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email,
          password,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success(
          "Password added successfully! You can now sign in with email/password."
        );

        // Automatically sign them in with the new password
        const result = await signIn("credentials", {
          email,
          password,
          redirect: false,
        });

        if (result?.ok) {
          router.push("/settings/accounts?password-added=true");
        } else {
          router.push("/login");
        }
      } else {
        toast.error(data.error || "Failed to add password");
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  const handleOAuthSignIn = async (provider: string) => {
    try {
      await signIn(provider, { callbackUrl: "/" });
    } catch (error) {
      toast.error("Sign in failed");
    }
  };

  if (fetchingUser) {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
        <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!userMethods) {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Invalid Request</CardTitle>
            <CardDescription>
              Unable to load user authentication methods.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button asChild className="w-full">
              <Link href="/login">Go to Sign In</Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">Add Password</CardTitle>
          <CardDescription className="text-center">
            Add a password to your account for additional sign-in options
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert>
            <AlertDescription>
              <div className="space-y-2">
                <div>
                  <strong>Account:</strong> {email}
                </div>
                <div>
                  <strong>Current sign-in methods:</strong>
                  <div className="flex gap-2 mt-1">
                    {userMethods.oauthProviders.map((provider) => (
                      <Badge key={provider} variant="secondary">
                        {provider === "google" ? "Google" : "GitHub"}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </AlertDescription>
          </Alert>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="password">New Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Enter a new password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                minLength={6}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
              <Input
                id="confirmPassword"
                type="password"
                placeholder="Confirm your password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                minLength={6}
              />
            </div>
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Adding Password..." : "Add Password to Account"}
            </Button>
          </form>

          {/* Rest of your component remains the same */}
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                or
              </span>
            </div>
          </div>

          <div>
            <p className="text-sm text-muted-foreground mb-3 text-center">
              Continue with your existing sign-in method instead
            </p>
            <div className="space-y-2">
              {userMethods.oauthProviders.includes("google") && (
                <Button
                  variant="outline"
                  onClick={() => handleOAuthSignIn("google")}
                  className="w-full"
                >
                  <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                    <path
                      d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                      fill="#4285F4"
                    />
                    <path
                      d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                      fill="#34A853"
                    />
                    <path
                      d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                      fill="#FBBC05"
                    />
                    <path
                      d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                      fill="#EA4335"
                    />
                  </svg>
                  Continue with Google
                </Button>
              )}

              {userMethods.oauthProviders.includes("github") && (
                <Button
                  variant="outline"
                  onClick={() => handleOAuthSignIn("github")}
                  className="w-full"
                >
                  <svg
                    className="mr-2 h-4 w-4"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
                  </svg>
                  Continue with GitHub
                </Button>
              )}
            </div>
          </div>

          <div className="pt-4 border-t text-center">
            <Button asChild variant="ghost" className="w-full">
              <Link href="/login">Back to Sign In</Link>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/add-password/page.tsx
================
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { redirect } from "next/navigation";
import AddPasswordForm from "./add-password-form";

export default async function AddPasswordPage() {
  const session = await getServerSession(authOptions);

  // Only redirect if NOT authenticated - we need them to be logged in
  if (!session) {
    redirect("/login");
  }

  return <AddPasswordForm session={session} />;
}

================
File: src/app/api/add-password/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/db";

export async function POST(req: NextRequest) {
  try {
    const { email, password } = await req.json();

    if (!email || !password) {
      return NextResponse.json(
        { error: "Email and password are required" },
        { status: 400 }
      );
    }

    if (password.length < 6) {
      return NextResponse.json(
        { error: "Password must be at least 6 characters" },
        { status: 400 }
      );
    }

    // Find the user
    const user = await prisma.user.findUnique({
      where: { email },
      include: { accounts: true },
    });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    // Check if user already has a password
    if (user.password) {
      return NextResponse.json(
        { error: "User already has a password" },
        { status: 400 }
      );
    }

    // Verify user has at least one OAuth account (security check)
    if (user.accounts.length === 0) {
      return NextResponse.json(
        { error: "Invalid account state" },
        { status: 400 }
      );
    }

    // Hash the new password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Update the user with the new password
    await prisma.user.update({
      where: { id: user.id },
      data: { password: hashedPassword },
    });

    return NextResponse.json(
      {
        success: true,
        message: "Password added successfully",
      },
      { status: 200 }
    );
  } catch (error) {
    console.error("Add password error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/auth/[...nextauth]/route.ts
================
import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };

================
File: src/app/api/change-password/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/db";

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { currentPassword, newPassword } = await req.json();

    if (!currentPassword || !newPassword) {
      return NextResponse.json(
        { error: "Current password and new password are required" },
        { status: 400 }
      );
    }

    if (newPassword.length < 6) {
      return NextResponse.json(
        { error: "New password must be at least 6 characters" },
        { status: 400 }
      );
    }

    // Find the user
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
    });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    // Check if user has a password (not OAuth-only)
    if (!user.password) {
      return NextResponse.json(
        {
          error:
            "This account does not have a password. Please use your social login method.",
        },
        { status: 400 }
      );
    }

    // Verify current password
    const isCurrentPasswordValid = await bcrypt.compare(
      currentPassword,
      user.password
    );

    if (!isCurrentPasswordValid) {
      return NextResponse.json(
        { error: "Current password is incorrect" },
        { status: 400 }
      );
    }

    // Check if new password is different from current
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
      return NextResponse.json(
        { error: "New password must be different from current password" },
        { status: 400 }
      );
    }

    // Hash new password
    const hashedNewPassword = await bcrypt.hash(newPassword, 12);

    // Update password in database
    await prisma.user.update({
      where: { id: user.id },
      data: { password: hashedNewPassword },
    });

    return NextResponse.json(
      {
        success: true,
        message: "Password changed successfully",
      },
      { status: 200 }
    );
  } catch (error) {
    console.error("Change password error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/check-user-auth-methods/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function POST(req: NextRequest) {
  try {
    const { email } = await req.json();

    if (!email) {
      return NextResponse.json({ error: "Email required" }, { status: 400 });
    }

    const user = await prisma.user.findUnique({
      where: { email },
      include: { accounts: true },
    });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    const hasPassword = !!user.password;
    const oauthProviders = user.accounts.map((acc) => acc.provider);

    return NextResponse.json({
      email: user.email,
      hasPassword,
      oauthProviders,
    });
  } catch (error) {
    console.error("Check user auth methods error:", error);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

================
File: src/app/api/link-account/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { provider, providerAccountId } = await req.json();

    // Link the OAuth account to the existing user
    await prisma.account.create({
      data: {
        userId: session.user.id,
        type: "oauth",
        provider,
        providerAccountId,
      },
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Account linking error:", error);
    return NextResponse.json(
      { error: "Failed to link account" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/progress-posts/[id]/comments/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// GET /api/progress-posts/[id]/comments - fetch comments for a progress post
export async function GET(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    const comments = await prisma.comment.findMany({
      where: { progressPostId: id },
      include: {
        author: {
          select: {
            id: true,
            name: true,
            image: true,
          },
        },
      },
      orderBy: { createdAt: "desc" },
    });

    return NextResponse.json(comments);
  } catch (error) {
    console.error("Error fetching progress post comments:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// POST /api/progress-posts/[id]/comments - create a new comment
export async function POST(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { id } = await params;
    const { content } = await req.json();

    // Validation
    if (!content || content.trim().length === 0) {
      return NextResponse.json(
        { error: "Comment content is required" },
        { status: 400 }
      );
    }

    if (content.length > 1000) {
      return NextResponse.json(
        { error: "Comment must be 1000 characters or less" },
        { status: 400 }
      );
    }

    // Verify progress post exists and is from a published project
    const progressPost = await prisma.progressPost.findFirst({
      where: {
        id,
        project: { isPublished: true },
      },
    });

    if (!progressPost) {
      return NextResponse.json(
        { error: "Progress post not found or not public" },
        { status: 404 }
      );
    }

    // Create comment
    const comment = await prisma.comment.create({
      data: {
        content: content.trim(),
        progressPostId: id,
        authorId: session.user.id,
      },
      include: {
        author: {
          select: {
            id: true,
            name: true,
            image: true,
          },
        },
      },
    });

    return NextResponse.json(comment, { status: 201 });
  } catch (error) {
    console.error("Error creating progress post comment:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/progress-posts/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// GET /api/progress-posts?take=10&cursor=<id>
export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const take = Number(searchParams.get("take") ?? 10);
  const cursor = searchParams.get("cursor") ?? undefined;

  const posts = await prisma.progressPost.findMany({
    where: { project: { isPublished: true } },
    orderBy: { createdAt: "desc" },
    take: take + 1, // grab one extra to know if there’s more
    ...(cursor && { skip: 1, cursor: { id: cursor } }),
    include: {
      author: { select: { id: true, name: true, image: true } },
      project: {
        select: {
          id: true,
          title: true,
          imageUrl: true,
          tags: { include: { tag: true } },
        },
      },
    },
  });

  const nextCursor = posts.length > take ? posts.pop()!.id : undefined;
  return NextResponse.json({ posts, nextCursor });
}

// POST /api/progress-posts - create new progress post
export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { title, content, imageUrl, projectId } = await req.json();

    // Validation
    if (!title || !content || !projectId) {
      return NextResponse.json(
        { error: "Title, content, and project ID are required" },
        { status: 400 }
      );
    }

    if (title.length > 200) {
      return NextResponse.json(
        { error: "Title must be 200 characters or less" },
        { status: 400 }
      );
    }

    // Verify project exists and user owns it
    const project = await prisma.project.findFirst({
      where: {
        id: projectId,
        authorId: session.user.id,
      },
    });

    if (!project) {
      return NextResponse.json(
        { error: "Project not found or you don't have permission" },
        { status: 404 }
      );
    }

    // Create progress post
    const progressPost = await prisma.progressPost.create({
      data: {
        title,
        content,
        imageUrl: imageUrl || null,
        projectId,
        authorId: session.user.id,
      },
      include: {
        author: { select: { id: true, name: true, image: true } },
        project: {
          select: {
            id: true,
            title: true,
            imageUrl: true,
          }
        }
      }
    });

    return NextResponse.json(progressPost, { status: 201 });
  } catch (error) {
    console.error("Error creating progress post:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/projects/[id]/milestones/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// POST - Add a new milestone
export async function POST(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { id } = await params;
    const { title, description, targetDate, icon } = await req.json();

    // Verify project ownership
    const project = await prisma.project.findUnique({
      where: { id, authorId: session.user.id },
      include: { milestones: { orderBy: { order: "asc" } } },
    });

    if (!project) {
      return NextResponse.json(
        { error: "Project not found or access denied" },
        { status: 404 }
      );
    }

    // Check milestone limit (max 10)
    if (project.milestones.length >= 10) {
      return NextResponse.json(
        { error: "Maximum 10 milestones allowed per project" },
        { status: 400 }
      );
    }

    // Get next order number
    const nextOrder =
      project.milestones.length > 0
        ? Math.max(...project.milestones.map((m) => m.order)) + 1
        : 1;

    // Create milestone
    const milestone = await prisma.milestone.create({
      data: {
        title: title.trim(),
        description: description?.trim() || null,
        targetDate: new Date(targetDate),
        order: nextOrder,
        icon: icon || null, // ✅ Include icon field
        projectId: id,
      },
    });

    // ✅ No longer need to recalculate and update progress

    return NextResponse.json(milestone, { status: 201 });
  } catch (error) {
    console.error("Add milestone error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// PATCH - Toggle milestone completion or update milestone
export async function PATCH(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { id } = await params;
    const { milestoneId, isCompleted, title, description, targetDate, icon } =
      await req.json();

    // Verify project ownership
    const project = await prisma.project.findUnique({
      where: { id, authorId: session.user.id },
    });

    if (!project) {
      return NextResponse.json(
        { error: "Project not found or access denied" },
        { status: 404 }
      );
    }

    // Update milestone
    const updateData: any = {};

    if (typeof isCompleted === "boolean") {
      updateData.isCompleted = isCompleted;
      updateData.completedAt = isCompleted ? new Date() : null;
    }

    if (title) updateData.title = title.trim();
    if (description !== undefined)
      updateData.description = description?.trim() || null;
    if (targetDate) updateData.targetDate = new Date(targetDate);
    if (icon !== undefined) updateData.icon = icon || null; // ✅ Include icon updates

    await prisma.milestone.update({
      where: { id: milestoneId },
      data: updateData,
    });

    // ✅ No longer need to recalculate and update progress

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Update milestone error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// DELETE - Remove a milestone
export async function DELETE(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { id } = await params;
    const { milestoneId } = await req.json();

    // Verify project ownership and check milestone count
    const project = await prisma.project.findUnique({
      where: { id, authorId: session.user.id },
      include: { milestones: true },
    });

    if (!project) {
      return NextResponse.json(
        { error: "Project not found or access denied" },
        { status: 404 }
      );
    }

    // Prevent deleting if only 1 milestone remains
    if (project.milestones.length <= 1) {
      return NextResponse.json(
        {
          error:
            "Cannot delete the last milestone. Projects must have at least 1 milestone.",
        },
        { status: 400 }
      );
    }

    // Delete milestone
    await prisma.milestone.delete({
      where: { id: milestoneId },
    });

    // ✅ No longer need to recalculate and update progress

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Delete milestone error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/projects/[id]/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// PUT - Update existing project
export async function PUT(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { id } = await params;

    const {
      title,
      description,
      content,
      imageUrl,
      status,
      difficulty,
      isPublished,
      tagIds,
      milestones,
    } = await req.json();

    // Verify project ownership
    const existingProject = await prisma.project.findUnique({
      where: {
        id,
        authorId: session.user.id,
      },
    });

    if (!existingProject) {
      return NextResponse.json(
        { error: "Project not found or access denied" },
        { status: 404 }
      );
    }

    // Validation (same as create)
    if (!title?.trim()) {
      return NextResponse.json(
        { error: "Project title is required" },
        { status: 400 }
      );
    }

    if (!content?.trim()) {
      return NextResponse.json(
        { error: "Project content is required" },
        { status: 400 }
      );
    }

    // ✅ Remove tag requirement - tags are now optional
    // if (!tagIds || tagIds.length === 0) {
    //   return NextResponse.json(
    //     { error: "At least one tag is required" },
    //     { status: 400 }
    //   );
    // }

    if (!milestones || milestones.length === 0) {
      return NextResponse.json(
        { error: "At least one milestone is required" },
        { status: 400 }
      );
    }

    // Update project with tags and milestones
    const updatedProject = await prisma.project.update({
      where: { id },
      data: {
        title: title.trim(),
        description: description?.trim() || null,
        content: content.trim(),
        imageUrl: imageUrl || null,
        status: status || "PLANNING",
        difficulty: difficulty || "BEGINNER",
        isPublished: isPublished || false,
        // Update tags - remove old ones and add new ones
        tags:
          tagIds && tagIds.length > 0
            ? {
                deleteMany: {},
                create: tagIds.map((tagId: string) => ({
                  tag: { connect: { id: tagId } },
                })),
              }
            : {
                deleteMany: {},
              },
        // Update milestones - remove old ones and add new ones
        milestones: {
          deleteMany: {},
          create: milestones.map((milestone: any, index: number) => ({
            title: milestone.title.trim(),
            description: milestone.description?.trim() || null,
            targetDate: new Date(milestone.targetDate),
            icon: milestone.icon || null, // ✅ Include icon field
            order: index + 1,
            isCompleted: milestone.isCompleted || false,
            completedAt: milestone.isCompleted ? new Date() : null,
          })),
        },
      },
      include: {
        author: {
          select: {
            id: true,
            name: true,
            email: true,
          },
        },
        tags: {
          include: {
            tag: true,
          },
        },
        milestones: {
          orderBy: { order: "asc" },
        },
      },
    });

    // ✅ No longer need to calculate and update progress
    // const calculatedProgress = calculateProgressFromMilestones(
    //   updatedProject.milestones
    // );
    // const finalProject = await prisma.project.update({
    //   where: { id },
    //   data: { progress: calculatedProgress },
    //   include: {
    //     author: {
    //       select: {
    //         id: true,
    //         name: true,
    //         email: true,
    //       },
    //     },
    //     tags: {
    //       include: {
    //         tag: true,
    //       },
    //     },
    //     milestones: {
    //       orderBy: { order: "asc" },
    //     },
    //   },
    // });

    return NextResponse.json(updatedProject);
  } catch (error) {
    console.error("Update project error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// DELETE - Delete project
export async function DELETE(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { id } = await params;

    // Verify project ownership
    const existingProject = await prisma.project.findUnique({
      where: {
        id,
        authorId: session.user.id,
      },
    });

    if (!existingProject) {
      return NextResponse.json(
        { error: "Project not found or access denied" },
        { status: 404 }
      );
    }

    // Delete project (this will cascade delete related records)
    await prisma.project.delete({
      where: { id },
    });

    return NextResponse.json({ message: "Project deleted successfully" });
  } catch (error) {
    console.error("Delete project error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/register/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { prisma } from "@/lib/db";

export async function POST(req: NextRequest) {
  try {
    const { name, email, password } = await req.json();

    if (!name || !email || !password) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    // Check if user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      return NextResponse.json(
        { error: "User already exists" },
        { status: 400 }
      );
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create user
    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword,
      },
    });

    return NextResponse.json(
      { message: "User created successfully", userId: user.id },
      { status: 201 }
    );
  } catch (error) {
    console.error("Registration error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/tags/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// GET - Fetch all tags
export async function GET() {
  try {
    const tags = await prisma.tag.findMany({
      orderBy: { name: "asc" },
    });

    return NextResponse.json(tags);
  } catch (error) {
    console.error("Fetch tags error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// POST - Create new tag
export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { name } = await req.json();

    if (!name?.trim()) {
      return NextResponse.json(
        { error: "Tag name is required" },
        { status: 400 }
      );
    }

    const slug = name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/(^-|-$)+/g, "");

    // Check if tag already exists
    const existingTag = await prisma.tag.findFirst({
      where: {
        OR: [{ name: { equals: name.trim(), mode: "insensitive" } }, { slug }],
      },
    });

    if (existingTag) {
      return NextResponse.json(existingTag);
    }

    // Create new tag
    const tag = await prisma.tag.create({
      data: {
        name: name.trim(),
        slug,
        color: generateRandomColor(),
      },
    });

    return NextResponse.json(tag);
  } catch (error) {
    console.error("Create tag error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

function generateRandomColor(): string {
  const colors = [
    "#ef4444",
    "#f97316",
    "#f59e0b",
    "#eab308",
    "#84cc16",
    "#22c55e",
    "#10b981",
    "#14b8a6",
    "#06b6d4",
    "#0ea5e9",
    "#3b82f6",
    "#6366f1",
    "#8b5cf6",
    "#a855f7",
    "#d946ef",
    "#ec4899",
    "#f43f5e",
  ];
  return colors[Math.floor(Math.random() * colors.length)];
}

================
File: src/app/api/user/linked-accounts/route.ts
================
import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

export async function GET() {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      include: { accounts: true },
    });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    const accounts = user.accounts.map((account) => ({
      provider: account.provider,
      linkedAt: account.createdAt || new Date(),
    }));

    return NextResponse.json({ accounts });
  } catch (error) {
    console.error("Failed to fetch linked accounts:", error);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

================
File: src/app/api/user/profile/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// GET - Fetch user profile
export async function GET() {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      // ✅ Remove 'include' and use only 'select'
      select: {
        id: true,
        name: true,
        email: true,
        bio: true,
        website: true,
        location: true,
        password: true,
        createdAt: true,
        accounts: {
          select: {
            provider: true,
          },
        },
      },
    });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    const profile = {
      name: user.name,
      email: user.email,
      bio: user.bio,
      website: user.website,
      location: user.location,
      hasPassword: !!user.password,
      oauthProviders: user.accounts.map((acc) => acc.provider),
      createdAt: user.createdAt.toISOString(),
    };

    return NextResponse.json(profile);
  } catch (error) {
    console.error("Get profile error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// PUT - Update user profile
export async function PUT(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
    }

    const { name, bio, website, location } = await req.json();

    // Validation
    if (name && name.length > 50) {
      return NextResponse.json(
        { error: "Name must be 50 characters or less" },
        { status: 400 }
      );
    }

    if (bio && bio.length > 500) {
      return NextResponse.json(
        { error: "Bio must be 500 characters or less" },
        { status: 400 }
      );
    }

    if (website && website.length > 200) {
      return NextResponse.json(
        { error: "Website must be 200 characters or less" },
        { status: 400 }
      );
    }

    if (location && location.length > 100) {
      return NextResponse.json(
        { error: "Location must be 100 characters or less" },
        { status: 400 }
      );
    }

    // URL validation for website
    if (website && website.trim()) {
      try {
        new URL(website);
      } catch {
        return NextResponse.json(
          { error: "Please enter a valid website URL" },
          { status: 400 }
        );
      }
    }

    // Update user profile
    const updatedUser = await prisma.user.update({
      where: { id: session.user.id },
      data: {
        name: name?.trim() || null,
        bio: bio?.trim() || null,
        website: website?.trim() || null,
        location: location?.trim() || null,
      },
      // ✅ Remove 'include' and use only 'select'
      select: {
        id: true,
        name: true,
        email: true,
        bio: true,
        website: true,
        location: true,
        password: true,
        createdAt: true,
        accounts: {
          select: {
            provider: true,
          },
        },
      },
    });

    const profile = {
      name: updatedUser.name,
      email: updatedUser.email,
      bio: updatedUser.bio,
      website: updatedUser.website,
      location: updatedUser.location,
      hasPassword: !!updatedUser.password,
      oauthProviders: updatedUser.accounts.map((acc) => acc.provider),
      createdAt: updatedUser.createdAt.toISOString(),
    };

    return NextResponse.json({
      message: "Profile updated successfully",
      user: profile,
    });
  } catch (error) {
    console.error("Update profile error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/user/unlink-account/route.ts
================
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 })
    }

    const { provider } = await req.json()

    if (!provider) {
      return NextResponse.json({ error: 'Provider is required' }, { status: 400 })
    }

    // Get user with all accounts
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      include: { accounts: true }
    })

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    // Check if this is the account they're currently signed in with
    const accountToUnlink = user.accounts.find(acc => acc.provider === provider)
    
    if (!accountToUnlink) {
      return NextResponse.json({ error: 'Account not found' }, { status: 404 })
    }

    // Count remaining auth methods after unlinking
    const remainingAccounts = user.accounts.filter(acc => acc.provider !== provider)
    const hasPassword = !!user.password
    const totalRemainingMethods = remainingAccounts.length + (hasPassword ? 1 : 0)

    // Prevent unlinking the only authentication method
    if (totalRemainingMethods === 0) {
      return NextResponse.json(
        { error: 'Cannot unlink your only authentication method' },
        { status: 400 }
      )
    }

    // Remove the account
    await prisma.account.deleteMany({
      where: {
        userId: session.user.id,
        provider: provider
      }
    })

    // If they're unlinking their current session provider, invalidate all sessions
    const shouldInvalidateSession = totalRemainingMethods === 1 || 
      (remainingAccounts.length === 0 && hasPassword)

    if (shouldInvalidateSession) {
      // Delete all user sessions to force re-authentication
      await prisma.session.deleteMany({
        where: { userId: session.user.id }
      })

      return NextResponse.json({ 
        success: true, 
        forceSignOut: true,
        message: 'Account unlinked. Please sign in again with your remaining authentication method.'
      })
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Failed to unlink account:', error)
    return NextResponse.json({ error: 'Server error' }, { status: 500 })
  }
}

================
File: src/app/create/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import ProjectForm from "./project-form";

export default async function CreateProjectPage() {
  const session = await requireAuth();
  return <ProjectForm session={session} />;
}

================
File: src/app/create/tabs/milestones-tab.tsx
================
// src/app/create/tabs/milestones-tab.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { MilestoneInput } from "@/components/milestone-input";

import type { UiMilestone } from "@/types/project";

interface MilestonesTabProps {
  milestones: UiMilestone[];
  onUpdate: (milestones: UiMilestone[]) => void;
}

export function MilestonesTab({ milestones, onUpdate }: MilestonesTabProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Project Milestones</CardTitle>
        <CardDescription>
          Break down your project into manageable milestones (at least one
          required)
        </CardDescription>
      </CardHeader>
      <CardContent>
        <MilestoneInput
          milestones={milestones}
          onChange={onUpdate}
          minMilestones={1}
          maxMilestones={10}
        />
      </CardContent>
    </Card>
  );
}

================
File: src/app/login/error/login-error-content.tsx
================
"use client";

import { useSearchParams } from "next/navigation";
import { useState, useEffect } from "react";
import { signIn } from "next-auth/react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";

interface UserAuthMethods {
  hasPassword: boolean;
  oauthProviders: string[];
  email: string;
}

export default function AuthErrorPage() {
  const searchParams = useSearchParams();
  const error = searchParams.get("error");
  const email = searchParams.get("email");
  const attemptedProvider = searchParams.get("provider");

  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [userMethods, setUserMethods] = useState<UserAuthMethods | null>(null);
  const [fetchingMethods, setFetchingMethods] = useState(true);

  // Fetch user's existing authentication methods
  useEffect(() => {
    if (email && error === "OAuthAccountNotLinked") {
      fetchUserAuthMethods();
    }
  }, [email, error]);

  const fetchUserAuthMethods = async () => {
    try {
      const response = await fetch("/api/check-user-auth-methods", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        const data = await response.json();
        setUserMethods(data);
      }
    } catch (error) {
      console.error("Failed to fetch user auth methods:", error);
    } finally {
      setFetchingMethods(false);
    }
  };

  const handlePasswordSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password) return;

    setIsLoading(true);
    try {
      const result = await signIn("credentials", {
        email,
        password,
        redirect: false,
      });

      if (result?.error) {
        toast.error("Invalid password. Please try again.");
      } else {
        toast.success("Signed in successfully! Linking accounts...");
        // The user is now logged in, we can link the OAuth account
        await linkOAuthAccount();
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  const linkOAuthAccount = async () => {
    try {
      // Trigger the OAuth flow again, now that user is authenticated
      const result = await signIn(attemptedProvider!, {
        redirect: true,
        callbackUrl: "/",
      });
    } catch (error) {
      toast.error("Failed to link account");
    }
  };

  const handleExistingOAuthSignIn = async (provider: string) => {
    try {
      await signIn(provider, { callbackUrl: "/" });
    } catch (error) {
      toast.error("Sign in failed");
    }
  };

  if (error !== "OAuthAccountNotLinked") {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Authentication Error</CardTitle>
            <CardDescription>
              Something went wrong during sign in.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button asChild className="w-full">
              <Link href="/login">Try Again</Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (fetchingMethods) {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
        <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Account Already Exists</CardTitle>
          <CardDescription>
            This email is already associated with an account using different
            sign-in methods.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert>
            <AlertDescription>
              <div className="space-y-2">
                <div>
                  <strong>Email:</strong> {email}
                </div>
                <div>
                  <strong>Attempted method:</strong> {attemptedProvider}
                </div>
                {userMethods && (
                  <div>
                    <strong>Existing methods:</strong>
                    <div className="flex gap-2 mt-1">
                      {userMethods.hasPassword && (
                        <Badge variant="secondary">Email/Password</Badge>
                      )}
                      {userMethods.oauthProviders.map((provider) => (
                        <Badge key={provider} variant="secondary">
                          {provider === "google" ? "Google" : "GitHub"}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </AlertDescription>
          </Alert>

          <div className="space-y-4">
            {/* Show password option only if user has a password */}
            {userMethods?.hasPassword ? (
              <div>
                <h4 className="font-medium mb-2">
                  Option 1: Sign in with your password
                </h4>
                <p className="text-sm text-muted-foreground mb-3">
                  Enter your password to sign in and we&apos;ll link your{" "}
                  {attemptedProvider} account.
                </p>

                <form onSubmit={handlePasswordSignIn} className="space-y-3">
                  <div className="space-y-2">
                    <Label htmlFor="password">Password</Label>
                    <Input
                      id="password"
                      type="password"
                      placeholder="Enter your password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      required
                    />
                  </div>
                  <Button type="submit" className="w-full" disabled={isLoading}>
                    {isLoading ? "Signing in..." : "Sign in and Link Accounts"}
                  </Button>
                </form>
              </div>
            ) : (
              <Alert>
                <AlertDescription>
                  This account was created using social login only and doesn&apos;t
                  have a password.
                </AlertDescription>
              </Alert>
            )}

            {/* Show existing OAuth providers */}
            {userMethods?.oauthProviders &&
              userMethods.oauthProviders.length > 0 && (
                <>
                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <span className="w-full border-t" />
                    </div>
                    <div className="relative flex justify-center text-xs uppercase">
                      <span className="bg-background px-2 text-muted-foreground">
                        {userMethods.hasPassword ? "or" : "Please"}
                      </span>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">
                      {userMethods.hasPassword ? "Option 2: " : ""}Sign in with
                      existing method
                    </h4>
                    <p className="text-sm text-muted-foreground mb-3">
                      Use one of your existing sign-in methods, then we&apos;ll link
                      your {attemptedProvider} account.
                    </p>

                    <div className="space-y-2">
                      {userMethods.oauthProviders.includes("google") && (
                        <Button
                          variant="outline"
                          onClick={() => handleExistingOAuthSignIn("google")}
                          className="w-full"
                        >
                          <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                            <path
                              d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                              fill="#4285F4"
                            />
                            <path
                              d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                              fill="#34A853"
                            />
                            <path
                              d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                              fill="#FBBC05"
                            />
                            <path
                              d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                              fill="#EA4335"
                            />
                          </svg>
                          Continue with Google
                        </Button>
                      )}

                      {userMethods.oauthProviders.includes("github") && (
                        <Button
                          variant="outline"
                          onClick={() => handleExistingOAuthSignIn("github")}
                          className="w-full"
                        >
                          <svg
                            className="mr-2 h-4 w-4"
                            fill="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
                          </svg>
                          Continue with GitHub
                        </Button>
                      )}
                    </div>
                  </div>
                </>
              )}

            {/* Password reset option (only if user has password) */}
            {userMethods?.hasPassword && (
              <>
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <span className="w-full border-t" />
                  </div>
                  <div className="relative flex justify-center text-xs uppercase">
                    <span className="bg-background px-2 text-muted-foreground">
                      or
                    </span>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-2">
                    Option 3: Reset your password
                  </h4>
                  <p className="text-sm text-muted-foreground mb-3">
                    If you forgot your password, reset it and then link your
                    accounts.
                  </p>
                  <Button asChild variant="outline" className="w-full">
                    <Link href={`/forgot-password?email=${email}`}>
                      Reset Password
                    </Link>
                  </Button>
                </div>
              </>
            )}
          </div>

          <div className="pt-4 border-t">
            <Button asChild variant="ghost" className="w-full">
              <Link href="/login">Back to Sign In</Link>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/login/page.tsx
================
import { redirectIfAuthenticated } from "@/lib/auth-utils";
import LoginForm from "./login-form";

export default async function LoginPage() {
  await redirectIfAuthenticated();
  return <LoginForm />;
}

================
File: src/app/my-projects/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import { prisma } from "@/lib/db";
import MyProjectsList from "./my-projects-list";

async function getUserProjects(userId: string) {
  try {
    const projects = await prisma.project.findMany({
      where: {
        authorId: userId,
      },
      include: {
        tags: {
          include: {
            tag: true,
          },
        },
        _count: {
          select: {
            comments: true,
          },
        },
      },
      orderBy: {
        updatedAt: "desc",
      },
    });

    return projects;
  } catch (error) {
    console.error("Failed to fetch user projects:", error);
    return [];
  }
}

export default async function MyProjectsPage() {
  const session = await requireAuth();
  const projects = await getUserProjects(session.user.id);

  return <MyProjectsList projects={projects} />;
}

================
File: src/app/projects/[id]/edit/not-found.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

export default function EditProjectNotFound() {
  return (
    <div className="max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <CardTitle>Project Not Found</CardTitle>
          <CardDescription>
            The project you&apos;re trying to edit doesn&apos;t exist or you don&apos;t have
            permission to edit it.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <Button asChild>
              <Link href="/my-projects">My Projects</Link>
            </Button>
            <Button asChild variant="outline">
              <Link href="/projects">Browse Projects</Link>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/projects/[id]/not-found.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

export default function ProjectNotFound() {
  return (
    <div className="max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <CardTitle>Project Not Found</CardTitle>
          <CardDescription>
            The project you&apos;re looking for doesn&apos;t exist or has been removed.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <Button asChild>
              <Link href="/projects">Browse Projects</Link>
            </Button>
            <Button asChild variant="outline">
              <Link href="/my-projects">My Projects</Link>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/register/page.tsx
================
import { redirectIfAuthenticated } from "@/lib/auth-utils";
import RegisterForm from "./register-form";

export default async function RegisterPage() {
  await redirectIfAuthenticated();
  return <RegisterForm />;
}

================
File: src/app/register/register-form.tsx
================
"use client";

import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { toast } from "sonner";

export default function RegisterForm() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleCredentialsSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (password !== confirmPassword) {
      toast.error("Passwords do not match");
      return;
    }

    if (password.length < 6) {
      toast.error("Password must be at least 6 characters");
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch("/api/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, email, password }),
      });

      if (response.ok) {
        toast.success("Account created successfully!");

        const result = await signIn("credentials", {
          email,
          password,
          redirect: false,
        });

        if (result?.ok) {
          router.push("/");
          router.refresh();
        } else {
          router.push("/login");
        }
      } else {
        const data = await response.json();
        toast.error(data.error || "Something went wrong");
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialLogin = async (provider: string) => {
    try {
      await signIn(provider, { callbackUrl: "/" });
    } catch (error) {
      toast.error("Something went wrong");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">Create account</CardTitle>
          <CardDescription className="text-center">
            Get started with your preferred method
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Social Login Buttons */}
          <div className="grid grid-cols-2 gap-4">
            <Button
              variant="outline"
              onClick={() => handleSocialLogin("google")}
              className="w-full"
            >
              <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              Google
            </Button>

            <Button
              variant="outline"
              onClick={() => handleSocialLogin("github")}
              className="w-full"
            >
              <svg
                className="mr-2 h-4 w-4"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
              </svg>
              GitHub
            </Button>
          </div>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or create account with email
              </span>
            </div>
          </div>

          {/* Email Registration Form */}
          <form onSubmit={handleCredentialsSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                type="text"
                placeholder="Enter your name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
              <Input
                id="confirmPassword"
                type="password"
                placeholder="Confirm your password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
            </div>
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Creating account..." : "Create account with Email"}
            </Button>
          </form>

          <div className="text-center text-sm">
            Already have an account?{" "}
            <Link href="/login" className="text-primary hover:underline">
              Sign in
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/settings/accounts/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import AccountsSettings from "./accounts-settings";

export default async function AccountsPage() {
  // Ensure user is authenticated before showing the page
  await requireAuth();
  return <AccountsSettings />;
}

================
File: src/app/settings/page.tsx
================
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function SettingsPage() {
  const router = useRouter();

  // Redirect to profile settings by default
  useEffect(() => {
    router.replace("/settings/profile");
  }, [router]);

  return (
    <div className="flex items-center justify-center min-h-[200px]">
      <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
    </div>
  );
}

================
File: src/app/settings/profile/page.tsx
================
import { requireAuth } from "@/lib/auth-utils";
import ProfileForm from "./profile-form";

export default async function SettingsProfilePage() {
  const session = await requireAuth();
  return <ProfileForm session={session} />;
}

================
File: src/app/settings/profile/profile-form.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Session } from "next-auth";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";

interface ProfileFormProps {
  session: Session;
}

interface UserProfile {
  name: string;
  email: string;
  bio?: string;
  website?: string;
  location?: string;
  hasPassword: boolean;
  oauthProviders: string[];
  createdAt: string;
}

export default function ProfileForm({ session }: ProfileFormProps) {
  const router = useRouter();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isFetching, setIsFetching] = useState(true);

  // Form state
  const [name, setName] = useState("");
  const [bio, setBio] = useState("");
  const [website, setWebsite] = useState("");
  const [location, setLocation] = useState("");

  // Fetch user profile on component mount
  useEffect(() => {
    fetchProfile();
  }, []);

  const fetchProfile = async () => {
    try {
      const response = await fetch("/api/user/profile");
      if (response.ok) {
        const data = await response.json();
        setProfile(data);

        // Set form fields
        setName(data.name || "");
        setBio(data.bio || "");
        setWebsite(data.website || "");
        setLocation(data.location || "");
      } else {
        toast.error("Failed to load profile");
      }
    } catch (error) {
      console.error("Failed to fetch profile:", error);
      toast.error("Something went wrong");
    } finally {
      setIsFetching(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await fetch("/api/user/profile", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: name.trim(),
          bio: bio.trim(),
          website: website.trim(),
          location: location.trim(),
        }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success("Profile updated successfully!");
        setProfile(data.user);
        router.refresh();
      } else {
        toast.error(data.error || "Failed to update profile");
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  if (isFetching) {
    return (
      <div className="flex items-center justify-center min-h-[200px]">
        <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!profile) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Error</CardTitle>
          <CardDescription>Failed to load profile information.</CardDescription>
        </CardHeader>
        <CardContent>
          <Button onClick={() => window.location.reload()} className="w-full">
            Try Again
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Account Info Card */}
      <Card>
        <CardHeader>
          <CardTitle>Account Information</CardTitle>
          <CardDescription>
            Your account details and authentication methods
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium">Email</Label>
              <div className="text-sm text-muted-foreground mt-1">
                {profile.email}
              </div>
            </div>

            <div>
              <Label className="text-sm font-medium">Member Since</Label>
              <div className="text-sm text-muted-foreground mt-1">
                {new Date(profile.createdAt).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </div>
            </div>
          </div>

          <div>
            <Label className="text-sm font-medium mb-2 block">
              Authentication Methods
            </Label>
            <div className="flex gap-2 flex-wrap">
              {profile.hasPassword && (
                <Badge variant="secondary">Email/Password</Badge>
              )}
              {profile.oauthProviders.map((provider) => (
                <Badge key={provider} variant="secondary">
                  {provider === "google" ? "Google" : "GitHub"}
                </Badge>
              ))}
            </div>
          </div>

          <Alert>
            <AlertDescription>
              To manage your authentication methods, visit{" "}
              <Button variant="link" asChild className="p-0 h-auto">
                <a href="/settings/accounts">Connected Accounts</a>
              </Button>
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>

      {/* Profile Form */}
      <Card>
        <CardHeader>
          <CardTitle>Public Profile</CardTitle>
          <CardDescription>
            This information will be visible to other users
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Display Name</Label>
              <Input
                id="name"
                type="text"
                placeholder="Your display name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                maxLength={50}
              />
              <div className="text-xs text-muted-foreground">
                {name.length}/50 characters
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="bio">Bio</Label>
              <Textarea
                id="bio"
                placeholder="Tell us a bit about yourself..."
                value={bio}
                onChange={(e) => setBio(e.target.value)}
                maxLength={500}
                rows={4}
              />
              <div className="text-xs text-muted-foreground">
                {bio.length}/500 characters
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="website">Website</Label>
                <Input
                  id="website"
                  type="url"
                  placeholder="https://your-website.com"
                  value={website}
                  onChange={(e) => setWebsite(e.target.value)}
                  maxLength={200}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="location">Location</Label>
                <Input
                  id="location"
                  type="text"
                  placeholder="City, Country"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  maxLength={100}
                />
              </div>
            </div>

            <Button type="submit" disabled={isLoading} className="w-full">
              {isLoading ? "Updating Profile..." : "Update Profile"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/components/change-password-dialog.tsx
================
"use client";

import { useState } from "react";
import { useSession, signOut } from "next-auth/react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { toast } from "sonner";

interface ChangePasswordDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function ChangePasswordDialog({
  open,
  onOpenChange,
}: ChangePasswordDialogProps) {
  const { data: session } = useSession();
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const resetForm = () => {
    setCurrentPassword("");
    setNewPassword("");
    setConfirmPassword("");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!currentPassword || !newPassword || !confirmPassword) {
      toast.error("Please fill in all fields");
      return;
    }

    if (newPassword !== confirmPassword) {
      toast.error("New passwords do not match");
      return;
    }

    if (newPassword.length < 6) {
      toast.error("New password must be at least 6 characters");
      return;
    }

    if (currentPassword === newPassword) {
      toast.error("New password must be different from current password");
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch("/api/change-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          currentPassword,
          newPassword,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success("Password changed successfully!");
        resetForm();
        onOpenChange(false);

        setTimeout(() => {
          signOut({
            callbackUrl: "/login",
            redirect: true,
          });
        }, 2000);
      } else {
        toast.error(data.error || "Failed to change password");
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    resetForm();
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Change Password</DialogTitle>
          <DialogDescription>
            Enter your current password and choose a new one.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <Alert>
            <AlertDescription>
              <strong>Account:</strong> {session?.user?.email}
            </AlertDescription>
          </Alert>

          <div className="space-y-2">
            <Label htmlFor="currentPassword">Current Password</Label>
            <Input
              id="currentPassword"
              type="password"
              placeholder="Enter your current password"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="newPassword">New Password</Label>
            <Input
              id="newPassword"
              type="password"
              placeholder="Enter new password (min 6 characters)"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              required
              minLength={6}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="confirmPassword">Confirm New Password</Label>
            <Input
              id="confirmPassword"
              type="password"
              placeholder="Confirm your new password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              minLength={6}
            />
          </div>

          <DialogFooter className="flex gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? "Changing Password..." : "Change Password"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/icon-selector.tsx
================
"use client";

import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import React from "react";
import { ClipboardList } from "lucide-react";
import {
  renderMilestoneIcon,
  ICON_OPTIONS,
} from "@/lib/milestone-utils";

interface IconSelectorProps {
  selectedIconName?: string;
  onSelectIcon: (name: string) => void;
}

export function IconSelector({
  selectedIconName,
  onSelectIcon,
}: IconSelectorProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="p-1 flex items-center justify-center"
          aria-label="Select icon"
        >
          {selectedIconName ? (
            renderMilestoneIcon(selectedIconName, "w-5 h-5")
          ) : (
            <ClipboardList className="w-5 h-5 text-muted-foreground" />
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="grid grid-cols-5 gap-2 max-w-xs p-2">
        {Object.entries(ICON_OPTIONS).map(([name, Icon]) => (
          <button
            key={name}
            type="button"
            onClick={() => onSelectIcon(name)}
            className="p-1 rounded hover:bg-muted flex items-center justify-center"
            aria-label={`Select ${name} icon`}
          >
            <Icon className="w-5 h-5" />
          </button>
        ))}
      </PopoverContent>
    </Popover>
  );
}

================
File: src/components/milestone-item.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useRef, useState, useEffect } from "react";
import { useDrag, useDrop } from "react-dnd";
import { format } from "date-fns";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import {
  GripVertical,
  Trash2,
  Calendar as CalendarIcon,
  Sparkles,
} from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import React from "react";
import {
} from "@/lib/milestone-templates";
import {
  IconSelector,
} from "./icon-selector";
import { UiMilestone } from "@/types/project";
import { getMilestoneIcon } from "@/lib/milestone-utils";

// interface Milestone {
//   title: string;
//   description: string | null;
//   targetDate: string | Date;
//   isCompleted: boolean;
//   isFromTemplate?: boolean;
//   templateId?: string;
//   icon?: string | null | undefined;
// }

interface MilestoneItemProps {
  milestone: UiMilestone;
  index: number;
  onUpdate: (
    index: number,
    field: keyof UiMilestone,
    value: string | boolean
  ) => void;
  onRemove: (index: number) => void;
  onMove: (dragIndex: number, hoverIndex: number) => void;
  canRemove: boolean;
  totalMilestones: number;
}

const ItemType = "MILESTONE";

interface DragItem {
  index: number;
  type: string;
}

export function MilestoneItem({
  milestone,
  index,
  onUpdate,
  onRemove,
  onMove,
  canRemove,
  totalMilestones,
}: MilestoneItemProps) {
  const ref = useRef<HTMLDivElement>(null);
  const dragHandleRef = useRef<HTMLDivElement>(null);
  const [dateOpen, setDateOpen] = useState(false);

  const [{ isDragging }, drag, preview] = useDrag({
    type: ItemType,
    item: { index, type: ItemType },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [, drop] = useDrop({
    accept: ItemType,
    hover: (item: DragItem) => {
      if (!item) return;
      const dragIndex = item.index;
      const hoverIndex = index;
      if (dragIndex === hoverIndex) return;
      onMove(dragIndex, hoverIndex);
      item.index = hoverIndex;
    },
  });

  useEffect(() => {
    if (ref.current) {
      drop(ref.current);
    }
  }, [drop]);

  useEffect(() => {
    if (dragHandleRef.current) {
      drag(dragHandleRef.current);
    }
    if (ref.current) {
      preview(ref.current);
    }
  }, [drag, preview]);

  const selectedDate = milestone.targetDate
    ? new Date(milestone.targetDate)
    : undefined;

  const handleDateSelect = (date: Date | undefined) => {
    if (date) {
      const dateStr = format(date, "yyyy-MM-dd");
      onUpdate(index, "targetDate", dateStr);
    }
    setDateOpen(false);
  };

  return (
    <div
      ref={ref}
      className={cn(
        "p-4 border rounded-lg space-y-4 group transition-all",
        isDragging ? "opacity-50 rotate-1 scale-105" : "hover:shadow-md"
      )}
      style={{ opacity: isDragging ? 0.5 : 1 }}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div
            ref={dragHandleRef}
            className="cursor-move p-1 rounded hover:bg-muted opacity-50 group-hover:opacity-100 transition-opacity"
          >
            <GripVertical className="h-4 w-4 text-muted-foreground" />
          </div>

          <h4 className="font-medium flex items-center gap-2">
            {getMilestoneIcon(milestone)}
            Milestone {index + 1}
            {milestone.isFromTemplate && (
              <Badge
                variant="secondary"
                className="text-xs flex items-center gap-1"
              >
                <Sparkles className="h-3 w-3" />
                Template
              </Badge>
            )}
          </h4>
        </div>

        <div className="flex items-center gap-2">
          {index > 0 && (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => onMove(index, index - 1)}
              className="opacity-0 group-hover:opacity-100 transition-opacity"
            >
              ↑
            </Button>
          )}
          {index < totalMilestones - 1 && (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => onMove(index, index + 1)}
              className="opacity-0 group-hover:opacity-100 transition-opacity"
            >
              ↓
            </Button>
          )}
          {canRemove && (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => onRemove(index)}
              className="text-destructive hover:text-destructive opacity-0 group-hover:opacity-100 transition-opacity"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor={`milestone-title-${index}`}>Milestone Title *</Label>
          <div className="flex items-center gap-2">
            <Input
              id={`milestone-title-${index}`}
              placeholder="e.g., Complete wireframes"
              value={milestone.title}
              onChange={(e) => onUpdate(index, "title", e.target.value)}
              className="flex-grow"
            />
            {!milestone.isFromTemplate && (
              <IconSelector
                selectedIconName={milestone.icon as string}
                onSelectIcon={(iconName: any) => onUpdate(index, "icon", iconName)}
              />
            )}
          </div>
        </div>

        <div className="space-y-2">
          <Label>Target Date *</Label>
          <Popover open={dateOpen} onOpenChange={setDateOpen}>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "w-full justify-start text-left font-normal",
                  !selectedDate && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {selectedDate ? format(selectedDate, "PPP") : "Pick a date"}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={handleDateSelect}
                initialFocus
                disabled={(date) => date < new Date()}
              />
            </PopoverContent>
          </Popover>
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor={`milestone-description-${index}`}>
          Description (optional)
        </Label>
        <Textarea
          id={`milestone-description-${index}`}
          placeholder="Describe what needs to be accomplished..."
          value={milestone.description as string}
          onChange={(e) => onUpdate(index, "description", e.target.value)}
          rows={2}
        />
      </div>
    </div>
  );
}

================
File: src/components/milestone-template-selector.tsx
================
"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ChevronDown, ChevronUp, Sparkles } from "lucide-react";
import React from "react";
import {
  getMilestoneTemplatesByCategory,
} from "@/lib/milestone-templates";
import { MilestoneTemplate } from "@/types/project";


interface MilestoneTemplateSelectorProps {
  onSelectTemplate: (template: MilestoneTemplate) => void;
}

const categoryLabels: Record<string, string> = {
  planning: "📋 Planning & Setup",
  development: "⚙️ Development",
  testing: "🔍 Testing & QA",
  review: "👀 Review & Feedback",
  launch: "🚀 Launch & Completion",
};

export function MilestoneTemplateSelector({
  onSelectTemplate,
}: MilestoneTemplateSelectorProps) {
  const [open, setOpen] = useState(false);
  const [expandedCategories, setExpandedCategories] = useState<string[]>([
    "planning",
  ]);
  const templatesByCategory = getMilestoneTemplatesByCategory();

  const toggleCategory = (category: string) => {
    setExpandedCategories((prev) =>
      prev.includes(category)
        ? prev.filter((c) => c !== category)
        : [...prev, category]
    );
  };

  const handleSelectTemplate = (template: MilestoneTemplate) => {
    onSelectTemplate(template);
    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" className="w-full">
          <Sparkles className="h-4 w-4 mr-2" />
          Choose from Templates
        </Button>
      </DialogTrigger>

      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Choose Milestone Template</DialogTitle>
          <DialogDescription>
            Select from predefined milestone templates to quickly set up your
            project timeline. You can customize these after adding them.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {Object.entries(templatesByCategory).map(([category, templates]) => (
            <Collapsible
              key={category}
              open={expandedCategories.includes(category)}
              onOpenChange={() => toggleCategory(category)}
            >
              <CollapsibleTrigger asChild>
                <Button
                  variant="ghost"
                  className="w-full justify-between p-3 h-auto"
                >
                  <span className="font-medium">
                    {categoryLabels[category]}
                  </span>
                  {expandedCategories.includes(category) ? (
                    <ChevronUp className="h-4 w-4" />
                  ) : (
                    <ChevronDown className="h-4 w-4" />
                  )}
                </Button>
              </CollapsibleTrigger>

              <CollapsibleContent className="space-y-2 pt-2">
                {templates.map((template) => {
                  const Icon = template.icon;
                  return (
                    <div
                      key={template.id}
                      className="p-3 border rounded-lg hover:bg-muted cursor-pointer transition-colors"
                      onClick={() => handleSelectTemplate(template)}
                    >
                      <div className="flex items-start gap-3">
                        <Icon className="w-6 h-6 text-primary" />
                        <div className="flex-1">
                          <h4 className="font-medium">{template.name}</h4>
                          <p className="text-sm text-muted-foreground mt-1">
                            {template.description}
                          </p>
                          <Badge variant="outline" className="mt-2 text-xs">
                            ~{template.suggestedDuration} days from start
                          </Badge>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </CollapsibleContent>
            </Collapsible>
          ))}
        </div>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/progress-post-comments.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { formatDistanceToNow } from "date-fns";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Card, CardContent } from "@/components/ui/card";
import { MessageCircle, Send, LogIn } from "lucide-react";
import { toast } from "sonner";
import Link from "next/link";

interface Comment {
  id: string;
  content: string;
  createdAt: string;
  author: {
    id: string;
    name: string | null;
    image: string | null;
  };
}

interface ProgressPostCommentsProps {
  progressPostId: string;
  className?: string;
}

export function ProgressPostComments({
  progressPostId,
  className = "",
}: ProgressPostCommentsProps) {
  const { data: session } = useSession();
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [showComments, setShowComments] = useState(false);

  // Fetch comments
  const fetchComments = async () => {
    try {
      const response = await fetch(
        `/api/progress-posts/${progressPostId}/comments`
      );
      if (response.ok) {
        const data = await response.json();
        setComments(data);
      }
    } catch (error) {
      console.error("Error fetching comments:", error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (showComments) {
      fetchComments();
    }
  }, [progressPostId, showComments]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!session) {
      toast.error("Please log in to comment");
      return;
    }

    if (!newComment.trim()) {
      toast.error("Please enter a comment");
      return;
    }

    setIsSubmitting(true);

    try {
      const response = await fetch(
        `/api/progress-posts/${progressPostId}/comments`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ content: newComment }),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to post comment");
      }

      const comment = await response.json();
      setComments((prev) => [comment, ...prev]);
      setNewComment("");
      toast.success("Comment posted successfully!");
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : "Failed to post comment"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={className}>
      {/* Comment Toggle Button */}
      <Button
        variant="ghost"
        size="sm"
        onClick={() => {
          setShowComments(!showComments);
          if (!showComments && !comments.length) {
            fetchComments();
          }
        }}
        className="flex items-center gap-2 text-muted-foreground hover:text-foreground"
      >
        <MessageCircle className="h-4 w-4" />
        <span>{comments.length} comments</span>
      </Button>

      {/* Comments Section */}
      {showComments && (
        <Card className="mt-4">
          <CardContent className="p-4 space-y-4">
            {/* Comment Form */}
            {session ? (
              <form onSubmit={handleSubmit} className="space-y-3">
                <div className="flex items-start gap-3">
                  <Avatar className="h-8 w-8">
                    <AvatarFallback className="text-xs">
                      {session.user.name?.[0] || "?"}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1 space-y-2">
                    <Textarea
                      placeholder="Add a comment..."
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      maxLength={1000}
                      rows={3}
                      className="resize-none"
                    />
                    <div className="flex items-center justify-between">
                      <span className="text-xs text-muted-foreground">
                        {newComment.length}/1000 characters
                      </span>
                      <Button
                        type="submit"
                        size="sm"
                        disabled={isSubmitting || !newComment.trim()}
                      >
                        <Send className="h-3 w-3 mr-1" />
                        {isSubmitting ? "Posting..." : "Post"}
                      </Button>
                    </div>
                  </div>
                </div>
              </form>
            ) : (
              <div className="text-center py-4 border border-border rounded-lg">
                <LogIn className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
                <p className="text-sm text-muted-foreground mb-3">
                  Please log in to leave a comment
                </p>
                <Button asChild size="sm">
                  <Link href="/login">Log In</Link>
                </Button>
              </div>
            )}

            {/* Comments List */}
            {isLoading ? (
              <div className="text-center py-4 text-muted-foreground">
                Loading comments...
              </div>
            ) : comments.length > 0 ? (
              <div className="space-y-4">
                {comments.map((comment) => (
                  <div key={comment.id} className="flex items-start gap-3">
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="text-xs">
                        {comment.author.name?.[0] || "?"}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1 space-y-1">
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium">
                          {comment.author.name || "Unknown"}
                        </span>
                        <span className="text-xs text-muted-foreground">
                          {formatDistanceToNow(new Date(comment.createdAt), {
                            addSuffix: true,
                          })}
                        </span>
                      </div>
                      <p className="text-sm whitespace-pre-wrap">
                        {comment.content}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-4 text-muted-foreground">
                No comments yet. Be the first to comment!
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}

================
File: src/components/progress-post-form.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { toast } from "sonner";
import { Upload, X, PlusCircle } from "lucide-react";
import Image from "next/image";

interface ProgressPostFormProps {
  projectId: string;
  projectTitle: string;
  trigger?: React.ReactNode;
}

export function ProgressPostForm({
  projectId,
  projectTitle,
  trigger,
}: ProgressPostFormProps) {
  const [open, setOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [imagePreview, setImagePreview] = useState("");
  const [formData, setFormData] = useState({
    title: "",
    content: "",
    imageUrl: "",
  });

  const router = useRouter();

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // In a real app, you'd upload to a service like Cloudinary
      // For now, we'll use a data URL for preview
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setImagePreview(result);
        setFormData((prev) => ({ ...prev, imageUrl: result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.title.trim() || !formData.content.trim()) {
      toast.error("Please fill in all required fields");
      return;
    }

    setIsSubmitting(true);

    try {
      const response = await fetch("/api/progress-posts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formData,
          projectId,
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to create progress post");
      }

      toast.success("Progress post created successfully!");

      // Reset form
      setFormData({ title: "", content: "", imageUrl: "" });
      setImagePreview("");
      setOpen(false);

      // Refresh the page to show the new post
      router.refresh();
    } catch (error) {
      toast.error(
        error instanceof Error
          ? error.message
          : "Failed to create progress post"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const resetForm = () => {
    setFormData({ title: "", content: "", imageUrl: "" });
    setImagePreview("");
  };

  return (
    <Dialog
      open={open}
      onOpenChange={(newOpen) => {
        setOpen(newOpen);
        if (!newOpen) {
          resetForm();
        }
      }}
    >
      <DialogTrigger asChild>
        {trigger || (
          <Button>
            <PlusCircle className="h-4 w-4 mr-2" />
            Add Progress Post
          </Button>
        )}
      </DialogTrigger>

      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Create Progress Post</DialogTitle>
          <DialogDescription>
            Share an update about your progress on &quot;{projectTitle}&quot;
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Post Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Title */}
              <div className="space-y-2">
                <Label htmlFor="title">Post Title *</Label>
                <Input
                  id="title"
                  placeholder="What did you accomplish?"
                  value={formData.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  maxLength={200}
                />
                <div className="text-xs text-muted-foreground">
                  {formData.title.length}/200 characters
                </div>
              </div>

              {/* Content */}
              <div className="space-y-2">
                <Label htmlFor="content">Progress Update *</Label>
                <Textarea
                  id="content"
                  placeholder="Describe what you worked on, what you learned, challenges you faced, next steps, etc..."
                  value={formData.content}
                  onChange={(e) => handleInputChange("content", e.target.value)}
                  rows={8}
                  className="resize-none"
                />
              </div>

              {/* Image Upload */}
              <div className="space-y-2">
                <Label>Progress Photo (optional)</Label>
                <div className="flex flex-col gap-4">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                    id="progress-image-upload"
                  />
                  <Label
                    htmlFor="progress-image-upload"
                    className="cursor-pointer"
                  >
                    <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                      <Upload className="h-4 w-4" />
                      Upload Progress Photo
                    </div>
                  </Label>
                </div>

                {imagePreview && (
                  <div className="relative w-full max-w-md">
                    <Image
                      src={imagePreview}
                      alt="Progress preview"
                      className="w-full h-48 object-cover rounded-lg border"
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      className="absolute top-2 right-2"
                      onClick={() => {
                        setImagePreview("");
                        setFormData((prev) => ({ ...prev, imageUrl: "" }));
                      }}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Submit Buttons */}
          <div className="flex gap-2 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => setOpen(false)}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Creating..." : "Create Progress Post"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/project-delete-dialog.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { toast } from "sonner";
import { Trash2, AlertTriangle } from "lucide-react";

interface ProjectDeleteDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  projectId: string;
  projectName: string;
}

export function ProjectDeleteDialog({
  open,
  onOpenChange,
  projectId,
  projectName,
}: ProjectDeleteDialogProps) {
  const [confirmationText, setConfirmationText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);
  const router = useRouter();

  const isConfirmationValid = confirmationText === projectName;

  const resetForm = () => {
    setConfirmationText("");
    setIsDeleting(false);
  };

  const handleClose = () => {
    resetForm();
    onOpenChange(false);
  };

  const handleDelete = async () => {
    if (!isConfirmationValid) {
      toast.error("Please type the project name exactly as shown");
      return;
    }

    setIsDeleting(true);

    try {
      const response = await fetch(`/api/projects/${projectId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to delete project");
      }

      toast.success("Project deleted successfully");
      handleClose();

      // Redirect to my projects page after successful deletion
      router.push("/my-projects");
      router.refresh();
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : "Failed to delete project"
      );
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-destructive">
            <AlertTriangle className="h-5 w-5" />
            Delete Project
          </DialogTitle>
          <DialogDescription>
            This action cannot be undone. This will permanently delete your
            project and all associated data including progress posts and
            comments.
          </DialogDescription>
        </DialogHeader>

        <Alert className="border-destructive/20 bg-destructive/5">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription className="text-sm">
            <strong>Warning:</strong> This will permanently delete:
            <ul className="mt-2 ml-4 list-disc text-xs space-y-1">
              <li>The project and all its content</li>
              <li>All progress posts</li>
              <li>All comments on the project and progress posts</li>
              <li>All project tags associations</li>
            </ul>
          </AlertDescription>
        </Alert>

        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="confirmation">
              To confirm deletion, type <strong>{projectName}</strong> below:
            </Label>
            <Input
              id="confirmation"
              value={confirmationText}
              onChange={(e) => setConfirmationText(e.target.value)}
              placeholder={`Type "${projectName}" to confirm`}
              className={
                confirmationText && !isConfirmationValid
                  ? "border-destructive focus-visible:ring-destructive"
                  : ""
              }
            />
            {confirmationText && !isConfirmationValid && (
              <p className="text-xs text-destructive">
                Project name doesn&apos;t match. Please type exactly: {projectName}
              </p>
            )}
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button
            type="button"
            variant="outline"
            onClick={handleClose}
            disabled={isDeleting}
          >
            Cancel
          </Button>
          <Button
            type="button"
            variant="destructive"
            onClick={handleDelete}
            disabled={!isConfirmationValid || isDeleting}
            className="gap-2"
          >
            <Trash2 className="h-4 w-4" />
            {isDeleting ? "Deleting..." : "Delete Project"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/project-milestone-progress-bar.tsx
================
"use client";

import React, { useMemo } from "react";
import { cn } from "@/lib/utils";
import type { UiMilestone } from "@/types/project";
import {
  calculateProgressFromMilestones,
  getMilestoneIcon,
} from "@/lib/milestone-utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface ProjectMilestoneProgressBarProps {
  milestones: UiMilestone[];
  creationDate: string | Date;
  className?: string;
}

export function ProjectMilestoneProgressBar({
  milestones,
  creationDate,
  className,
}: ProjectMilestoneProgressBarProps) {
  const projectStart = new Date(creationDate);
  const sorted = [...milestones].sort(
    (a, b) =>
      new Date(a.targetDate).getTime() - new Date(b.targetDate).getTime()
  );

  const progress = useMemo(() => {
    return calculateProgressFromMilestones(
      sorted.map((m) => ({
        ...m,
        targetDate: new Date(m.targetDate),
        completedAt: m.completedAt ? new Date(m.completedAt) : null,
      }))
    );
  }, [sorted]);

  if (sorted.length === 0) return null;

  const projectEnd = new Date(sorted[sorted.length - 1].targetDate);
  const totalSpanMs = Math.max(
    projectEnd.getTime() - projectStart.getTime(),
    1
  );

  const points = sorted.map((ms, index) => {
    const msTime = new Date(ms.targetDate).getTime();
    const position = Math.max(
      0,
      Math.min(1, (msTime - projectStart.getTime()) / totalSpanMs)
    );
    const milestoneProgress = position * 100;
    const isActive = progress >= milestoneProgress;
    const isCurrentMilestone =
      !isActive &&
      (index === 0 ||
        progress >=
          ((new Date(sorted[index - 1].targetDate).getTime() -
            projectStart.getTime()) /
            totalSpanMs) *
            100);

    return {
      ...ms,
      position,
      isActive,
      isCurrentMilestone,
      index,
    };
  });

  return (
    <TooltipProvider>
      <div className={cn("w-full px-2 py-6", className)}>
        <div className="relative h-20">
          {/* Base Line */}
          <div className="absolute top-1/2 left-0 right-0 h-2.5 bg-muted rounded-full -translate-y-1/2 z-0" />

          {/* Progress Fill */}
          <div
            className="absolute top-1/2 left-0 h-2.5 bg-primary rounded-full -translate-y-1/2 z-10"
            style={{ width: `${Math.min(progress, 100)}%` }}
          />

          {/* Milestones */}
          {points.map((milestone, idx) => {
            const isLast = idx === points.length - 1;
            const leftStyle = isLast
              ? { right: "0", transform: "translateX(50%)" }
              : {
                  left: `${(milestone.position * 100).toFixed(2)}%`,
                  transform: "translateX(-50%)",
                };

            const iconColor = milestone.isActive
              ? "bg-primary text-black"
              : milestone.isCurrentMilestone
              ? "bg-background border border-primary text-primary"
              : "bg-muted text-muted-foreground";

            return (
              <Tooltip key={milestone.title + milestone.targetDate + idx}>
                <TooltipTrigger asChild>
                  <div
                    className={cn(
                      "absolute z-20 -translate-y-1/2",
                      "rounded-md p-1 w-10 h-10 flex items-center justify-center",
                      iconColor
                    )}
                    style={{ ...leftStyle, top: "50%" }}
                  >
                    {getMilestoneIcon(milestone, "w-4 h-4")}
                  </div>
                </TooltipTrigger>
                <TooltipContent
                  side="top"
                  className="text-xs px-2 py-1 text-center"
                >
                  <div className="font-medium">{milestone.title}</div>
                  <div className="text-muted-foreground">
                    {new Date(milestone.targetDate).toLocaleDateString(
                      "en-US",
                      {
                        month: "short",
                        day: "numeric",
                      }
                    )}
                  </div>
                </TooltipContent>
              </Tooltip>
            );
          })}
        </div>

        {/* Progress label */}
        <div className="mt-4 text-center text-sm text-muted-foreground font-medium">
          {Math.round(progress)}% Complete
        </div>
      </div>
    </TooltipProvider>
  );
}

================
File: src/components/project-progress-posts.tsx
================
"use client";

import { formatDistanceToNow } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";

interface ProgressPost {
  id: string;
  title: string;
  content: string;
  imageUrl: string | null;
  createdAt: Date;
  author: {
    id: string;
    name: string | null;
    image: string | null;
  };
}

interface ProjectProgressPostsProps {
  posts: ProgressPost[];
}

export function ProjectProgressPosts({ posts }: ProjectProgressPostsProps) {
  if (posts.length === 0) {
    return (
      <Card>
        <CardContent className="py-8 text-center text-muted-foreground">
          No progress posts yet. Create your first update to share your journey!
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Progress Updates</h2>

      <div className="space-y-4">
        {posts.map((post) => (
          <Card key={post.id}>
            <CardHeader>
              <div className="flex justify-between items-start">
                <CardTitle className="text-lg">{post.title}</CardTitle>
                <Badge variant="outline">
                  {formatDistanceToNow(post.createdAt, { addSuffix: true })}
                </Badge>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              {post.imageUrl && (
                <Image
                  src={post.imageUrl}
                  alt={post.title}
                  className="w-full h-64 object-cover rounded-lg border"
                />
              )}

              <div className="prose max-w-none">
                <p className="whitespace-pre-wrap">{post.content}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: src/components/theme-toggle.tsx
================
"use client";

import { Moon, Sun } from "lucide-react";
import { useState, useEffect } from "react";
import { cn } from "@/lib/utils";

export function ThemeToggle() {
  const [isDark, setIsDark] = useState(false);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    // Check for saved theme preference or default to 'light'
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;

    const shouldBeDark = savedTheme === "dark" || (!savedTheme && prefersDark);
    setIsDark(shouldBeDark);

    if (shouldBeDark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDark;
    setIsDark(newTheme);

    if (newTheme) {
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
    } else {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("theme", "light");
    }
  };

  // Prevent hydration mismatch
  if (!mounted) {
    return (
      <div className="flex items-center space-x-2">
        <span className="text-sm font-medium">Theme</span>
        <div className="relative inline-flex h-6 w-11 items-center rounded-full bg-muted">
          <div className="h-4 w-4 rounded-full bg-background border shadow-sm" />
        </div>
      </div>
    );
  }

  return (
    <div className="flex items-center space-x-2">
      <button
        onClick={toggleTheme}
        className={cn(
          "relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background cursor-pointer",
          isDark ? "bg-primary" : "bg-muted"
        )}
        role="switch"
        aria-checked={isDark}
        aria-label="Toggle theme"
      >
        <span
          className={cn(
            "inline-block h-4 w-4 transform rounded-full bg-background shadow-lg ring-0 transition-transform duration-200 ease-in-out",
            isDark ? "translate-x-6" : "translate-x-1"
          )}
        >
          <div className="flex h-full w-full items-center justify-center">
            {isDark ? (
              <Moon className="h-2.5 w-2.5 text-foreground" />
            ) : (
              <Sun className="h-2.5 w-2.5 text-foreground" />
            )}
          </div>
        </span>
      </button>
    </div>
  );
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive cursor-pointer",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

================
File: src/components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "absolute bg-popover inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

================
File: src/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }

================
File: src/components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/confirmation-dialog.tsx
================
"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

interface ConfirmationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  title: string;
  description: string;
  confirmText?: string;
  cancelText?: string;
  variant?: "default" | "destructive";
  onConfirm: () => void;
}

export function ConfirmationDialog({
  open,
  onOpenChange,
  title,
  description,
  confirmText = "Confirm",
  cancelText = "Cancel",
  variant = "default",
  onConfirm,
}: ConfirmationDialogProps) {
  const handleConfirm = () => {
    onConfirm();
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
          <DialogDescription>{description}</DialogDescription>
        </DialogHeader>
        <DialogFooter className="flex gap-2">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            {cancelText}
          </Button>
          <Button variant={variant} onClick={handleConfirm}>
            {confirmText}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================
File: src/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}

================
File: src/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================
File: src/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================
File: src/components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: src/components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }

================
File: src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================
File: src/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }

================
File: src/components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }

================
File: src/components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }

================
File: src/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

================
File: src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/hooks/use-confirmation-dialog.ts
================
"use client";

import { useState } from "react";

interface UseConfirmationDialogProps {
  title: string;
  description: string;
  confirmText?: string;
  cancelText?: string;
  variant?: "default" | "destructive";
}

export function useConfirmationDialog() {
  const [isOpen, setIsOpen] = useState(false);
  const [config, setConfig] = useState<UseConfirmationDialogProps | null>(null);
  const [onConfirmCallback, setOnConfirmCallback] = useState<
    (() => void) | null
  >(null);

  const confirm = (props: UseConfirmationDialogProps): Promise<boolean> => {
    return new Promise((resolve) => {
      setConfig(props);
      setOnConfirmCallback(() => () => {
        resolve(true);
        setIsOpen(false);
      });
      setIsOpen(true);

      // Handle cancel/close
      const handleCancel = () => {
        resolve(false);
        setIsOpen(false);
      };

      // Store cancel handler for later use
      setOnConfirmCallback(() => () => {
        resolve(true);
        setIsOpen(false);
      });
    });
  };

  return {
    confirm,
    dialogProps: config
      ? {
          open: isOpen,
          onOpenChange: (open: boolean) => {
            if (!open) {
              setIsOpen(false);
            }
          },
          title: config.title,
          description: config.description,
          confirmText: config.confirmText,
          cancelText: config.cancelText,
          variant: config.variant,
          onConfirm: onConfirmCallback || (() => {}),
        }
      : null,
  };
}

================
File: src/lib/auth-utils.ts
================
import { redirect } from "next/navigation";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function requireAuth() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  return session;
}

export async function redirectIfAuthenticated() {
  const session = await getServerSession(authOptions);

  if (session) {
    redirect("/");
  }
}

================
File: src/lib/db.ts
================
import { PrismaClient } from "@prisma/client";

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/types/next-auth.d.ts
================
import { DefaultSession } from "next-auth";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
    } & DefaultSession["user"];
  }

  interface User {
    id: string;
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string;
  }
}

================
File: src/types/project.ts
================
// src/types/project.ts

import type { LucideIcon } from "lucide-react";

// For main project creation/edit flows
export interface Tag {
  id: string;
  name: string;
  slug: string;
  color: string | null;
  createdAt: Date;
  usageCount?: number;
}

export interface UiMilestone {
  // Database fields (from Prisma schema)
  id?: string; // Optional for new milestones
  title: string;
  description: string | null;
  targetDate: string | Date; // Allow both formats
  isCompleted: boolean;
  completedAt?: Date | null;
  order?: number; // Optional for new milestones
  projectId?: string; // Optional for form usage
  createdAt?: Date; // Optional for form usage
  updatedAt?: Date; // Optional for form usage

  // Form-specific fields
  isFromTemplate?: boolean;
  templateId?: string;
  icon?: string | null;
}

export interface MilestoneTemplate {
  id: string;
  name: string;
  description: string;
  suggestedDuration: number; // days from project start
  category: "planning" | "development" | "testing" | "launch" | "review";
  icon: LucideIcon;
}

export interface FormData {
  title: string;
  description: string;
  content: string;
  imageUrl: string;
  difficulty: string;
  status: string;
  isPublished: boolean;
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/src/generated/prisma

================
File: src/app/create/tabs/basic-info-tab.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/app/create/tabs/basic-info-tab.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Upload, X } from "lucide-react";
import Image from "next/image";

import type {
  
  FormData,
  
} from "@/types/project";

interface BasicInfoTabProps {
  formData: FormData;
  onUpdate: (field: string, value: any) => void;
}

export function BasicInfoTab({ formData, onUpdate }: BasicInfoTabProps) {
  const [imagePreview, setImagePreview] = useState<string>(formData.imageUrl);

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setImagePreview(result);
        onUpdate("imageUrl", result);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeImage = () => {
    setImagePreview("");
    onUpdate("imageUrl", "");
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Basic Information</CardTitle>
        <CardDescription>
          Tell us about your project. What are you building?
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Title */}
        <div>
          <Label htmlFor="title">Project Title *</Label>
          <Input
            id="title"
            value={formData.title}
            onChange={(e) => onUpdate("title", e.target.value)}
            placeholder="Enter your project title..."
            className="mt-1"
            required
          />
        </div>

        {/* Description */}
        <div>
          <Label htmlFor="description">Short Description</Label>
          <Input
            id="description"
            value={formData.description}
            onChange={(e) => onUpdate("description", e.target.value)}
            placeholder="Brief description of your project..."
            className="mt-1"
          />
        </div>

        {/* Content */}
        <div>
          <Label htmlFor="content">Detailed Content *</Label>
          <Textarea
            id="content"
            value={formData.content}
            onChange={(e) => onUpdate("content", e.target.value)}
            placeholder="Describe your project in detail. What will you build? What materials do you need? What's the process?"
            className="mt-1 min-h-[120px]"
            required
          />
        </div>

        {/* Image Upload */}
        <div>
          <Label>Project Image</Label>
          <div className="flex flex-col gap-4 mt-1">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              className="hidden"
              id="image-upload"
            />
            <Label htmlFor="image-upload" className="cursor-pointer">
              <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                <Upload className="h-4 w-4" />
                Upload Image
              </div>
            </Label>
          </div>

          {imagePreview && (
            <div className="relative w-full max-w-md mt-4">
              <Image
                src={imagePreview}
                alt="Project preview"
                width={400}
                height={192}
                className="w-full h-48 object-cover rounded-lg border"
              />
              <Button
                type="button"
                variant="destructive"
                size="sm"
                className="absolute top-2 right-2"
                onClick={removeImage}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/app/create/tabs/settings-tab.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/app/create/tabs/settings-tab.tsx
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

import type {FormData} from "@/types/project";

interface SettingsTabProps {
  formData: FormData;
  onUpdate: (field: string, value: any) => void;
}

export function SettingsTab({ formData, onUpdate }: SettingsTabProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Project Settings</CardTitle>
        <CardDescription>
          Configure your project settings and visibility
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Difficulty */}
        <div>
          <Label htmlFor="difficulty">Difficulty Level</Label>
          <Select
            value={formData.difficulty}
            onValueChange={(value) => onUpdate("difficulty", value)}
          >
            <SelectTrigger className="mt-1">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="BEGINNER">Beginner</SelectItem>
              <SelectItem value="INTERMEDIATE">Intermediate</SelectItem>
              <SelectItem value="ADVANCED">Advanced</SelectItem>
              <SelectItem value="EXPERT">Expert</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Status */}
        <div>
          <Label htmlFor="status">Project Status</Label>
          <Select
            value={formData.status}
            onValueChange={(value) => onUpdate("status", value)}
          >
            <SelectTrigger className="mt-1">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="PLANNING">Planning</SelectItem>
              <SelectItem value="IN_PROGRESS">In Progress</SelectItem>
              <SelectItem value="COMPLETED">Completed</SelectItem>
              <SelectItem value="ON_HOLD">On Hold</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Publishing Options */}
        <div className="flex items-center space-x-2">
          <Switch
            id="publish"
            checked={formData.isPublished}
            onCheckedChange={(checked) => onUpdate("isPublished", checked)}
          />
          <Label htmlFor="publish">
            Publish immediately (make it visible to everyone)
          </Label>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/app/create/tabs/tags-tab.tsx
================
import { useState, useEffect, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Plus, X, Search } from "lucide-react";
import { toast } from "sonner";

import type {
  Tag
} from "@/types/project";

interface TagsTabProps {
  selectedTags: Tag[];
  onUpdate: (tags: Tag[]) => void;
}

export function TagsTab({ selectedTags, onUpdate }: TagsTabProps) {
  const [allTags, setAllTags] = useState<Tag[]>([]);
  const [search, setSearch] = useState("");
  const [isAdding, setIsAdding] = useState(false);

  // Fetch all tags (should be sorted by popularity on backend)
  useEffect(() => {
    fetchTags();
  }, []);

  const fetchTags = async () => {
    try {
      const response = await fetch("/api/tags");
      if (response.ok) {
        const tags = await response.json();
        // Optionally sort by usageCount if available
        const popular = tags.sort(
          (a: Tag, b: Tag) => (b.usageCount || 0) - (a.usageCount || 0)
        );
        setAllTags(popular);
      }
    } catch (error) {
      console.error("Failed to fetch tags:", error);
    }
  };

  // Filter tags by search input and exclude already-selected tags
  const filteredTags = useMemo(() => {
    return allTags
      .filter(
        (tag) =>
          !selectedTags.find((selected) => selected.id === tag.id) &&
          (!search || tag.name.toLowerCase().includes(search.toLowerCase()))
      )
      .slice(0, 10); // show up to 10
  }, [search, allTags, selectedTags]);

  // Add selected tag
  const addTag = (tag: Tag) => {
    if (!selectedTags.find((t) => t.id === tag.id)) {
      onUpdate([...selectedTags, tag]);
      setSearch("");
    }
  };

  // Remove selected tag
  const removeTag = (tagId: string) => {
    onUpdate(selectedTags.filter((tag) => tag.id !== tagId));
  };

  // Create a new tag
  const handleCreateTag = async () => {
    if (!search.trim()) return;
    setIsAdding(true);
    try {
      const response = await fetch("/api/tags", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: search.trim() }),
      });
      if (response.ok) {
        const newTag = await response.json();
        setAllTags([...allTags, newTag]);
        addTag(newTag);
        toast.success("Tag created successfully!");
      } else if (response.status === 409) {
        toast.error("Tag already exists.");
      } else {
        toast.error("Failed to create tag");
      }
    } catch (error) {
      toast.error("Failed to create tag");
      console.error("Failed to create tag:", error);
    } finally {
      setIsAdding(false);
    }
  };

  // Allow Enter in search to create new tag if not found
  const handleSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (
      e.key === "Enter" &&
      search.trim() &&
      !filteredTags.find(
        (t) => t.name.toLowerCase() === search.trim().toLowerCase()
      )
    ) {
      e.preventDefault();
      handleCreateTag();
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Project Tags</CardTitle>
        <CardDescription>
          Add up to 5 tags to help others discover your project (optional)
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Selected Tags */}
        {selectedTags.length > 0 && (
          <div>
            <Label>Selected Tags</Label>
            <div className="flex flex-wrap gap-2 mt-2">
              {selectedTags.map((tag) => (
                <Badge
                  key={tag.id}
                  variant="secondary"
                  className="flex items-center gap-1"
                >
                  {tag.name}
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="h-4 w-4 p-0 hover:bg-transparent"
                    onClick={() => removeTag(tag.id)}
                  >
                    <X className="h-3 w-3" />
                  </Button>
                </Badge>
              ))}
            </div>
          </div>
        )}

        {/* Popular Tags and Search */}
        <div>
          <Label htmlFor="tag-search">Add from popular tags or search</Label>
          <div className="flex flex-col gap-3 mt-2">
            <div className="flex items-center gap-2">
              <Input
                id="tag-search"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                onKeyDown={handleSearchKeyDown}
                placeholder="Type to search for tags or create a new one"
                className="w-full"
                maxLength={32}
                disabled={selectedTags.length >= 5}
                autoComplete="off"
              />
              <Button
                type="button"
                onClick={handleCreateTag}
                disabled={
                  !search.trim() ||
                  !!filteredTags.find(
                    (t) => t.name.toLowerCase() === search.trim().toLowerCase()
                  ) ||
                  isAdding ||
                  selectedTags.length >= 5
                }
                variant="outline"
                className="shrink-0"
                tabIndex={-1}
              >
                <Plus className="h-4 w-4" />
              </Button>
            </div>
            {/* Suggest popular tags as user types */}
            {filteredTags.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {filteredTags.map((tag) => (
                  <Badge
                    key={tag.id}
                    variant="outline"
                    className="cursor-pointer hover:bg-muted"
                    onClick={() => addTag(tag)}
                    tabIndex={0}
                  >
                    {tag.name}
                  </Badge>
                ))}
              </div>
            )}
            {/* If no matches, show create option */}
            {search.trim() &&
              !filteredTags.find(
                (t) => t.name.toLowerCase() === search.trim().toLowerCase()
              ) && (
                <div className="text-muted-foreground text-sm mt-1">
                  Enter to create “{search.trim()}”
                </div>
              )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/app/login/error/page.tsx
================
import { Suspense } from "react";
import LoginErrorContent from "./login-error-content"; // Move your current component logic here

export default function LoginErrorPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <LoginErrorContent />
    </Suspense>
  );
}

================
File: src/app/login/login-form.tsx
================
"use client";

import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";

interface OAuthOnlyError {
  type: string;
  email: string;
  providers: string[];
}

export default function LoginForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [oauthOnlyError, setOauthOnlyError] = useState<OAuthOnlyError | null>(
    null
  );
  const [socialSignInLoading, setSocialSignInLoading] = useState<string | null>(
    null
  );
  const router = useRouter();

  const handleCredentialsSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setOauthOnlyError(null);

    try {
      console.log("🔄 Attempting credentials sign in...");
      const result = await signIn("credentials", {
        email,
        password,
        redirect: false,
      });

      if (result?.error) {
        try {
          const errorData = JSON.parse(result.error);
          if (errorData.type === "OAuthOnlyAccount") {
            setOauthOnlyError(errorData);
            return;
          }
        } catch {
          // Not a JSON error, handle as normal
        }

        toast.error("Invalid email or password");
      } else {
        toast.success("Logged in successfully!");
        setTimeout(() => {
          window.location.href = "/"; // Use window.location instead of router
        }, 1000);
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialLogin = async (
    provider: string,
    redirectToSettings = false
  ) => {
    setSocialSignInLoading(provider);

    try {
      const callbackUrl = redirectToSettings
        ? "/settings/accounts?welcome=true"
        : "/";

      const result = await signIn(provider, {
        callbackUrl,
        redirect: false,
      });

      if (result?.error === "OAuthAccountNotLinked") {
        const email = result.url?.includes("email=")
          ? decodeURIComponent(result.url.split("email=")[1].split("&")[0])
          : "unknown";

        window.location.href = `/login/error?error=OAuthAccountNotLinked&email=${encodeURIComponent(
          email
        )}&provider=${provider}`;
      } else if (result?.error) {
        toast.error("Sign in failed: " + result.error);
      } else if (result?.ok) {
        if (redirectToSettings) {
          toast.success(
            "Signed in successfully! Redirecting to account settings..."
          );
        }
        window.location.href = result.url || callbackUrl;
      }
    } catch (error) {
      console.error("Social login error:", error);
      toast.error("Something went wrong during sign in");
    } finally {
      setSocialSignInLoading(null);
    }
  };

  const clearOAuthError = () => {
    setOauthOnlyError(null);
    setEmail("");
    setPassword("");
  };

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">Sign in</CardTitle>
          <CardDescription className="text-center">
            {oauthOnlyError
              ? "Account found! Please sign in with your existing method"
              : "Choose your preferred sign-in method"}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Enhanced OAuth-only Account Error */}
          {oauthOnlyError && (
            <div className="space-y-4">
              <Alert className="border-blue-200 bg-blue-50">
                
                <AlertDescription>
                  <div className="space-y-3 text-blue-900">
                    <p>
                      We found an existing account for{" "}
                      <strong>{oauthOnlyError.email}</strong>, but it was
                      created using social login.
                    </p>

                    <div>
                      <p className="text-sm font-medium mb-2">
                        Available sign-in methods:
                      </p>
                      <div className="flex gap-2 flex-wrap">
                        {oauthOnlyError.providers.map((provider) => (
                          <Badge
                            key={provider}
                            variant="secondary"
                            className="bg-blue-100 text-blue-800"
                          >
                            {provider === "google" ? "Google" : "GitHub"}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <p className="text-sm text-center text-muted-foreground font-medium">
                  Sign in with your existing method to access your account:
                </p>

                <div className="space-y-2">
                  {oauthOnlyError.providers.includes("google") && (
                    <Button
                      variant="outline"
                      onClick={() => handleSocialLogin("google", true)}
                      className="w-full justify-items-center-safe"
                      disabled={socialSignInLoading === "google"}
                    >
                      {socialSignInLoading === "google" ? (
                        <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-current"></div>
                      ) : (
                        <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                          <path
                            d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                            fill="#4285F4"
                          />
                          <path
                            d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                            fill="#34A853"
                          />
                          <path
                            d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                            fill="#FBBC05"
                          />
                          <path
                            d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                            fill="#EA4335"
                          />
                        </svg>
                      )}
                      Continue with Google
                    </Button>
                  )}

                  {oauthOnlyError.providers.includes("github") && (
                    <Button
                      variant="outline"
                      onClick={() => handleSocialLogin("github", true)}
                      className="w-full justify-start"
                      disabled={socialSignInLoading === "github"}
                    >
                      {socialSignInLoading === "github" ? (
                        <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-current"></div>
                      ) : (
                        <svg
                          className="mr-2 h-4 w-4"
                          fill="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
                        </svg>
                      )}
                      Continue with GitHub
                    </Button>
                  )}
                </div>

                <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
                  <div className="flex items-start">
                    <svg
                      className="h-5 w-5 text-amber-600 mr-2 mt-0.5 flex-shrink-0"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    <div className="text-sm text-amber-800">
                      <p className="font-medium mb-1">
                        Want to add a password?
                      </p>
                      <p>
                        After signing in, you&apos;ll be taken to your account
                        settings where you can add a password for additional
                        sign-in options.
                      </p>
                    </div>
                  </div>
                </div>

                <Button
                  variant="ghost"
                  onClick={clearOAuthError}
                  size="sm"
                  className="w-full"
                >
                  Try different email
                </Button>
              </div>
            </div>
          )}

          {/* Only show social login and email form if no OAuth-only error */}
          {!oauthOnlyError && (
            <>
              {/* Social Login Buttons */}
              <div className="grid grid-cols-2 gap-4">
                <Button
                  variant="outline"
                  onClick={() => handleSocialLogin("google")}
                  className="w-full"
                  disabled={socialSignInLoading === "google"}
                >
                  {socialSignInLoading === "google" ? (
                    <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-current"></div>
                  ) : (
                    <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                      <path
                        d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                        fill="#4285F4"
                      />
                      <path
                        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                        fill="#34A853"
                      />
                      <path
                        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                        fill="#FBBC05"
                      />
                      <path
                        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                        fill="#EA4335"
                      />
                    </svg>
                  )}
                  Google
                </Button>

                <Button
                  variant="outline"
                  onClick={() => handleSocialLogin("github")}
                  className="w-full"
                  disabled={socialSignInLoading === "github"}
                >
                  {socialSignInLoading === "github" ? (
                    <div className="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-current"></div>
                  ) : (
                    <svg
                      className="mr-2 h-4 w-4"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
                    </svg>
                  )}
                  GitHub
                </Button>
              </div>

              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <span className="w-full border-t" />
                </div>
                <div className="relative flex justify-center text-xs uppercase">
                  <span className="bg-background px-2 text-muted-foreground">
                    Or continue with email
                  </span>
                </div>
              </div>

              {/* Email/Password Form */}
              <form onSubmit={handleCredentialsSubmit} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password">Password</Label>
                  <Input
                    id="password"
                    type="password"
                    placeholder="Enter your password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? "Signing in..." : "Sign in with Email"}
                </Button>
              </form>
            </>
          )}

          <div className="text-center text-sm">
            Don&apos;t have an account?{" "}
            <Link href="/register" className="text-primary hover:underline">
              Sign up
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/projects/[id]/edit/page.tsx
================
import { notFound } from "next/navigation";
import { prisma } from "@/lib/db";
import { requireAuth } from "@/lib/auth-utils";
import ProjectEditForm from "./project-edit-form";

interface ProjectEditPageProps {
  params: Promise<{
    id: string;
  }>;
}

async function getProject(id: string, userId: string) {
  const project = await prisma.project.findUnique({
    where: { id },
    include: {
      tags: {
        include: {
          tag: true,
        },
      },
      // Add milestones to the query
      milestones: {
        orderBy: { order: "asc" },
      },
    },
  });

  // Ensure user can only edit their own projects
  if (project && project.authorId !== userId) {
    return null;
  }

  return project;
}

export default async function ProjectEditPage({
  params,
}: ProjectEditPageProps) {
  const session = await requireAuth();

  // Fix: Await params before accessing its properties
  const { id } = await params;
  const project = await getProject(id, session.user.id);

  if (!project) {
    notFound();
  }

  return <ProjectEditForm project={project} />;
}

================
File: src/app/settings/accounts/accounts-settings.tsx
================
"use client";

import { useSession, signOut } from "next-auth/react";
import { useState, useEffect } from "react";
import { signIn } from "next-auth/react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { ConfirmationDialog } from "@/components/ui/confirmation-dialog";
import { ChangePasswordDialog } from "@/components/change-password-dialog";
import { useConfirmationDialog } from "@/hooks/use-confirmation-dialog";
import { toast } from "sonner";

interface LinkedAccount {
  provider: string;
  email?: string;
  linkedAt: string;
}

interface UserAuthMethods {
  hasPassword: boolean;
  oauthProviders: string[];
  email: string;
}

export default function AccountsSettings() {
  const { data: session } = useSession();
  const [linkedAccounts, setLinkedAccounts] = useState<LinkedAccount[]>([]);
  const [userAuthMethods, setUserAuthMethods] =
    useState<UserAuthMethods | null>(null);
  const [loading, setLoading] = useState(true);
  const [showChangePasswordDialog, setShowChangePasswordDialog] =
    useState(false);
  const { confirm, dialogProps } = useConfirmationDialog();

  useEffect(() => {
    if (session?.user?.id) {
      fetchLinkedAccounts();
      fetchUserAuthMethods();
    }
  }, [session]);

  // Handle welcome message from OAuth-only error flow
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get("welcome") === "true") {
      toast.success(
        "Welcome! You can now add a password to your account for additional sign-in options."
      );
      window.history.replaceState({}, "", "/settings/accounts");
    }
    if (urlParams.get("password-added") === "true") {
      toast.success(
        "Password added successfully! You now have multiple sign-in options."
      );
      window.history.replaceState({}, "", "/settings/accounts");
    }
  }, []);

  const fetchLinkedAccounts = async () => {
    try {
      const response = await fetch("/api/user/linked-accounts");
      if (response.ok) {
        const data = await response.json();
        setLinkedAccounts(data.accounts);
      }
    } catch (error) {
      console.error("Failed to fetch linked accounts:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchUserAuthMethods = async () => {
    if (!session?.user?.email) return;

    try {
      const response = await fetch("/api/check-user-auth-methods", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: session.user.email }),
      });

      if (response.ok) {
        const data = await response.json();
        setUserAuthMethods(data);
      }
    } catch (error) {
      console.error("Failed to fetch user auth methods:", error);
    }
  };

  const linkAccount = async (provider: string) => {
    try {
      const result = await signIn(provider, {
        redirect: false,
        callbackUrl: "/settings/accounts?linked=true",
      });

      if (result?.ok) {
        toast.success(`${provider} account linked successfully!`);
        fetchLinkedAccounts();
        fetchUserAuthMethods();
      } else if (result?.error) {
        toast.error("Failed to link account: " + result.error);
      }
    } catch (error) {
      toast.error("Failed to link account");
    }
  };

  const unlinkAccount = async (provider: string) => {
    const providerName = provider === "google" ? "Google" : "GitHub";

    const confirmed = await confirm({
      title: `Unlink ${providerName} Account`,
      description: `Are you sure you want to unlink your ${providerName} account? You may need to sign in again if this is your current authentication method.`,
      confirmText: "Unlink Account",
      cancelText: "Keep Connected",
      variant: "destructive",
    });

    if (!confirmed) return;

    try {
      const response = await fetch("/api/user/unlink-account", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ provider }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success(`${providerName} account unlinked successfully`);

        if (data.forceSignOut) {
          toast.info("Signing you out for security. Please sign in again.");

          setTimeout(() => {
            signOut({ callbackUrl: "/login?message=account-unlinked" });
          }, 2000);
        } else {
          fetchLinkedAccounts();
          fetchUserAuthMethods();
        }
      } else {
        toast.error(data.error || "Failed to unlink account");
      }
    } catch (error) {
      toast.error("Failed to unlink account");
    }
  };

  const isLinked = (provider: string) =>
    linkedAccounts.some((acc) => acc.provider === provider);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <div className="space-y-6">

        <Alert>
          <AlertDescription>
            <strong>Security Note:</strong> If you unlink your current
            authentication method, you&apos;ll be signed out and need to sign in
            again with a remaining method.
          </AlertDescription>
        </Alert>

        <Card>
          <CardHeader>
            <CardTitle>Social Accounts</CardTitle>
            <CardDescription>
              Link your social accounts to sign in with multiple methods
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Google Account */}
            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div className="flex items-center gap-3">
                <svg className="h-6 w-6" viewBox="0 0 24 24">
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    fill="#4285F4"
                  />
                  <path
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    fill="#EA4335"
                  />
                </svg>
                <div>
                  <div className="font-medium">Google</div>
                  <div className="text-sm text-muted-foreground">
                    {isLinked("google") ? "Connected" : "Not connected"}
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {isLinked("google") && (
                  <Badge variant="secondary">Connected</Badge>
                )}
                {isLinked("google") ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => unlinkAccount("google")}
                  >
                    Disconnect
                  </Button>
                ) : (
                  <Button size="sm" onClick={() => linkAccount("google")}>
                    Connect
                  </Button>
                )}
              </div>
            </div>

            {/* GitHub Account */}
            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div className="flex items-center gap-3">
                <svg
                  className="h-6 w-6"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z" />
                </svg>
                <div>
                  <div className="font-medium">GitHub</div>
                  <div className="text-sm text-muted-foreground">
                    {isLinked("github") ? "Connected" : "Not connected"}
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {isLinked("github") && (
                  <Badge variant="secondary">Connected</Badge>
                )}
                {isLinked("github") ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => unlinkAccount("github")}
                  >
                    Disconnect
                  </Button>
                ) : (
                  <Button size="sm" onClick={() => linkAccount("github")}>
                    Connect
                  </Button>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Password Management Section */}
        <Card>
          <CardHeader>
            <CardTitle>Password Authentication</CardTitle>
            <CardDescription>
              Manage your password for email/password authentication
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            {/* Add Password - Only show if user doesn't have a password */}
            {session?.user?.email &&
              userAuthMethods &&
              !userAuthMethods.hasPassword && (
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <div className="font-medium">Password</div>
                    <div className="text-sm text-muted-foreground">
                      No password set - Add one for additional sign-in options
                    </div>
                  </div>
                  <Button asChild>
                    <Link href="/add-password">Add Password</Link>
                  </Button>
                </div>
              )}

            {/* Change Password - Only show if user has a password */}
            {session?.user?.email &&
              userAuthMethods &&
              userAuthMethods.hasPassword && (
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <div className="font-medium">Password</div>
                    <div className="text-sm text-muted-foreground">
                      Password authentication enabled 
                    </div>
                  </div>
                  <Button
                    variant="outline"
                    onClick={() => setShowChangePasswordDialog(true)}
                  >
                    Change Password
                  </Button>
                </div>
              )}
          </CardContent>
        </Card>
      </div>

      {/* Render dialogs */}
      {dialogProps && <ConfirmationDialog {...dialogProps} />}
      <ChangePasswordDialog
        open={showChangePasswordDialog}
        onOpenChange={setShowChangePasswordDialog}
      />
    </>
  );
}

================
File: src/app/settings/layout.tsx
================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";

const settingsNavigation = [
  {
    name: "Profile",
    href: "/settings/profile",
    description: "Manage your public profile information",
  },
  {
    name: "Connected Accounts",
    href: "/settings/accounts",
    description: "Manage your authentication methods",
  },
  {
    name: "Preferences",
    href: "/settings/preferences",
    description: "Customize your experience",
  },
];

export default function SettingsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const pathname = usePathname();

  return (
    <div className="max-w-6xl mx-auto space-y-6 p-6">
      <div>
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-muted-foreground">
          Manage your account settings and preferences.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Settings Navigation */}
        <div className="lg:col-span-1">
          <Card>
            <CardContent className="p-4">
              <nav className="space-y-2">
                {settingsNavigation.map((item) => (
                  <Link
                    key={item.href}
                    href={item.href}
                    className={cn(
                      "block px-3 py-2 rounded-md text-sm font-medium transition-colors",
                      pathname === item.href
                        ? "bg-primary text-primary-foreground"
                        : "hover:bg-muted"
                    )}
                  >
                    <div className="font-medium">{item.name}</div>
                    <div className="text-xs text-muted-foreground mt-1">
                      {item.description}
                    </div>
                  </Link>
                ))}
              </nav>
            </CardContent>
          </Card>
        </div>

        {/* Settings Content */}
        <div className="lg:col-span-3">{children}</div>
      </div>
    </div>
  );
}

================
File: src/components/progress-post-card.tsx
================
// src/components/progress-post-card.tsx
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
import { ProgressPostComments } from "./progress-post-comments";
import { ProjectMilestoneProgressBar } from "./project-milestone-progress-bar";

interface ProgressPostCardProps {
  post: {
    id: string;
    title: string;
    createdAt: Date;
    content: string;
    author: { id: string; name: string | null; image: string | null };
    project: {
      id: string;
      title: string;
      imageUrl: string | null;
      tags: { tag: { id: string; name: string; color: string | null } }[];
      createdAt: Date;
      milestones: Array<{
        id: string;
        title: string;
        description: string | null;
        targetDate: Date;
        isCompleted: boolean;
        completedAt: Date | null;
        order: number;
      }>;
    };
  };
}

export function ProgressPostCard({ post }: ProgressPostCardProps) {
  const preview =
    post.content.slice(0, 160) + (post.content.length > 160 ? "…" : "");

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg">
          <Link
            href={`/projects/${post.project.id}`}
            className="hover:underline"
          >
            {post.title}
          </Link>
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          {post.author.name ?? "Unknown"} •{" "}
          {formatDistanceToNow(post.createdAt, { addSuffix: true })}
        </p>
      </CardHeader>

      <CardContent className="space-y-3">
        {post.project.imageUrl && (
          <Image
            src={post.project.imageUrl}
            alt={post.project.title}
            width={400}
            height={192}
            className="w-full h-48 object-cover rounded-md border"
          />
        )}

        <p>{preview}</p>

        <div className="flex flex-wrap gap-2">
          {post.project.tags.map(({ tag }) => (
            <Badge key={tag.id} style={{ background: tag.color ?? undefined }}>
              {tag.name}
            </Badge>
          ))}
        </div>

        {/* ✅ Updated Progress Bar - No progress prop needed */}
        <div className="space-y-2">
          <span className="text-xs font-medium text-muted-foreground">
            Progress
          </span>
          <ProjectMilestoneProgressBar
            milestones={post.project.milestones.map((m) => ({
              title: m.title,
              description: m.description,
              targetDate: m.targetDate.toISOString().split("T")[0],
              isCompleted: m.isCompleted,
              completedAt: m.completedAt,
              order: m.order,
            }))}
            creationDate={post.project.createdAt}
          />
        </div>

        <Link
          href={`/projects/${post.project.id}`}
          className="inline-block text-sm font-medium underline"
        >
          Read more →
        </Link>

        <ProgressPostComments progressPostId={post.id} />
      </CardContent>
    </Card>
  );
}

================
File: src/components/project-milestones.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useState } from "react";
import { formatDistanceToNow, format } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Calendar,
  CheckCircle2,
  Circle,
  Clock,
  AlertTriangle,
  Target,
} from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import {
  getMilestoneStatusIcon,
  getMilestoneStatus,
} from "@/lib/milestone-utils";
import { Milestone } from "@prisma/client";


interface ProjectMilestonesProps {
  projectId: string;
  milestones: Milestone[];
  isOwner: boolean;
  className?: string;
}

export function ProjectMilestones({
  projectId,
  milestones,
  isOwner,
  className = "",
}: ProjectMilestonesProps) {
  const [isUpdating, setIsUpdating] = useState<string | null>(null);
  const router = useRouter();

  const sortedMilestones = milestones.sort((a, b) => a.order - b.order);

  const handleMilestoneToggle = async (
    milestoneId: string,
    isCompleted: boolean
  ) => {
    if (!isOwner) return;

    setIsUpdating(milestoneId);

    try {
      const response = await fetch(`/api/projects/${projectId}/milestones`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          milestoneId,
          isCompleted,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to update milestone");
      }

      toast.success(
        isCompleted ? "Milestone completed!" : "Milestone reopened"
      );
      router.refresh();
    } catch (error) {
      toast.error("Failed to update milestone");
    } finally {
      setIsUpdating(null);
    }
  };


  const getMilestoneStatusBadge = (milestone: Milestone) => {
    if (milestone.isCompleted) {
      return (
        <Badge variant="secondary" className="bg-green-100 text-green-800">
          Completed{" "}
          {formatDistanceToNow(milestone.completedAt!, { addSuffix: true })}
        </Badge>
      );
    }

    const status = getMilestoneStatus(milestone);
    switch (status) {
      case "overdue":
        return <Badge variant="destructive">Overdue</Badge>;
      case "current":
        return <Badge variant="default">Current Target</Badge>;
      case "upcoming":
        return <Badge variant="outline">Upcoming</Badge>;
      default:
        return null;
    }
  };

  return (
    <div className={className}>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Project Milestones
            </CardTitle>
            <div className="text-right">
              
              <div className="text-xs text-muted-foreground">Progress</div>
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {sortedMilestones.map((milestone, index) => {
            const status = getMilestoneStatus(milestone);

            return (
              <div
                key={milestone.id}
                className={cn(
                  "flex items-start gap-4 p-4 rounded-lg border transition-colors",
                  milestone.isCompleted && "bg-green-50 border-green-200",
                  status === "overdue" &&
                    !milestone.isCompleted &&
                    "bg-red-50 border-red-200",
                  status === "current" &&
                    !milestone.isCompleted &&
                    "bg-blue-50 border-blue-200"
                )}
              >
                <div className="flex items-center gap-3 min-w-0 flex-1">
                  {/* Milestone Icon */}
                  <div className="flex-shrink-0">
                    {getMilestoneStatusIcon(milestone, "h-5 w-5")}
                  </div>

                  {/* Milestone Content */}
                  <div className="min-w-0 flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium">
                        Milestone {milestone.order}: {milestone.title}
                      </h4>
                      {getMilestoneStatusBadge(milestone)}
                    </div>

                    {milestone.description && (
                      <p className="text-sm text-muted-foreground mb-2">
                        {milestone.description}
                      </p>
                    )}

                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        <span>
                          Due: {format(milestone.targetDate, "MMM dd, yyyy")}
                        </span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        <span>
                          {milestone.isCompleted
                            ? `Completed ${formatDistanceToNow(
                                milestone.completedAt!,
                                { addSuffix: true }
                              )}`
                            : formatDistanceToNow(milestone.targetDate, {
                                addSuffix: true,
                              })}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Completion Checkbox (only for owners) */}
                  {isOwner && (
                    <div className="flex-shrink-0">
                      <Checkbox
                        checked={milestone.isCompleted}
                        disabled={isUpdating === milestone.id}
                        onCheckedChange={(checked: any) =>
                          handleMilestoneToggle(milestone.id, !!checked)
                        }
                      />
                    </div>
                  )}
                </div>
              </div>
            );
          })}

          {/* Progress Summary */}
          <div className="mt-6 pt-4 border-t">
            <div className="flex justify-between text-sm">
              <span>Milestones Completed:</span>
              <span className="font-medium">
                {sortedMilestones.filter((m) => m.isCompleted).length} /{" "}
                {sortedMilestones.length}
              </span>
            </div>
            <div className="flex justify-between text-sm mt-1">
              <span>Time-based Progress:</span>
              
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/hooks/use-project-form.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/app/create/hooks/use-project-form.ts
import { useState, useEffect } from "react";

import type {
  FormData,
  Tag,
  UiMilestone, // Import the centralized Milestone interface
} from "@/types/project";

export function useProjectForm() {

  const [formData, setFormData] = useState<FormData>({
    title: "",
    description: "",
    content: "",
    imageUrl: "",
    difficulty: "BEGINNER",
    status: "PLANNING",
    isPublished: false,
  });

  const [milestones, setMilestones] = useState<UiMilestone[]>([
    {
      title: "",
      description: "",
      targetDate: "",
      isCompleted: false,
    },
  ]);

  const [selectedTags, setSelectedTags] = useState<Tag[]>([]);

  const [tabValidation, setTabValidation] = useState({
    basic: false,
    tags: true,
    milestones: false,
    settings: true,
  });

  // Update validation when data changes
  useEffect(() => {
    const basicValid =
      formData.title.trim() !== "" && formData.content.trim() !== "";
    const validMilestones = milestones.filter(
      (m) => m.title.trim() !== "" && m.targetDate !== ""
    );
    const milestonesValid = validMilestones.length >= 1;

    setTabValidation({
      basic: basicValid,
      tags: true,
      milestones: milestonesValid,
      settings: true,
    });
  }, [formData.title, formData.content, milestones]);

  const updateFormData = (field: string, value: any) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const updateMilestones = (newMilestones: UiMilestone[]) => {
    setMilestones(newMilestones);
  };

  const updateSelectedTags = (newTags: Tag[]) => {
    setSelectedTags(newTags);
  };

  return {
    formData,
    milestones,
    selectedTags,
    tabValidation,
    updateFormData,
    updateMilestones,
    updateSelectedTags,
  };
}

================
File: src/app/api/projects/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/app/api/projects/route.ts
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// POST - Create new project
export async function POST(req: NextRequest) {
  const session = await getServerSession(authOptions);
  if (!session?.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const {
      title,
      description,
      content,
      imageUrl,
      difficulty,
      status,
      isPublished,
      tags,
      milestones,
    } = await req.json();

    // Validation
    if (!title || !content) {
      return NextResponse.json(
        { error: "Title and content are required" },
        { status: 400 }
      );
    }

    if (!milestones || milestones.length === 0) {
      return NextResponse.json(
        { error: "At least one milestone is required" },
        { status: 400 }
      );
    }

    // Validate milestone dates are in order
    const sortedMilestones = [...milestones].sort(
      (a, b) =>
        new Date(a.targetDate).getTime() - new Date(b.targetDate).getTime()
    );

    // Create project with tags and milestones
    const project = await prisma.project.create({
      data: {
        title,
        description,
        content,
        imageUrl,
        difficulty,
        status,
        isPublished,
        authorId: session.user.id,
        // ✅ Removed progress field
        tags:
          tags && tags.length > 0
            ? {
                create: tags.map((tagId: string) => ({
                  tag: {
                    connect: {
                      id: tagId,
                    },
                  },
                })),
              }
            : undefined,
        milestones: {
          create: sortedMilestones.map((milestone: any, index: number) => ({
            title: milestone.title,
            description: milestone.description,
            targetDate: new Date(milestone.targetDate),
            isCompleted: milestone.isCompleted || false,
            icon: milestone.icon,
            order: index + 1,
          })),
        },
      },
      include: {
        tags: {
          include: {
            tag: true,
          },
        },
        milestones: true,
      },
    });

    // ✅ No longer need to calculate and update progress

    return NextResponse.json(project);
  } catch (error) {
    console.error("Project creation error:", error);
    return NextResponse.json(
      { error: "Failed to create project" },
      { status: 500 }
    );
  }
}

================
File: src/app/create/project-form.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/app/create/project-form.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Session } from "next-auth";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { FileText, Tags, Target, Settings, X, ArrowLeft } from "lucide-react";
import { toast } from "sonner";

import { BasicInfoTab } from "./tabs/basic-info-tab";
import { TagsTab } from "./tabs/tags-tab";
import { MilestonesTab } from "./tabs/milestones-tab";
import { SettingsTab } from "./tabs/settings-tab";
import { useProjectForm } from "@/hooks/use-project-form";

interface ProjectFormProps {
  session: Session;
}

export default function ProjectForm({ session }: ProjectFormProps) {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState("basic");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    formData,
    milestones,
    selectedTags,
    tabValidation,
    updateFormData,
    updateMilestones,
    updateSelectedTags,
  } = useProjectForm();

  const handleCancel = () => {
    // Navigate back to the previous page or to my projects
    router.back();
    // Alternative: router.push('/my-projects') if you want a specific destination
  };

  const handleSubmit = async () => {
    if (isSubmitting) return;

    // Validate all tabs
    const allTabsValid = Object.values(tabValidation).every((valid) => valid);
    if (!allTabsValid) {
      toast.error("Please complete all required fields");
      return;
    }

    // Filter out empty milestones
    const validMilestones = milestones.filter(
      (m: any) => m.title.trim() !== "" && m.targetDate !== ""
    );

    if (validMilestones.length === 0) {
      toast.error("At least one milestone is required");
      return;
    }

    setIsSubmitting(true);

    try {
      const response = await fetch("/api/projects", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formData,
          tags: selectedTags.map((tag: any) => tag.id),
          milestones: validMilestones.map((m) => ({
            title: m.title,
            description: m.description,
            targetDate: m.targetDate,
            isCompleted: m.isCompleted,
            icon: m.icon, // ✅ Make sure this is included
          })),
        }),
      });

      if (response.ok) {
        const project = await response.json();
        toast.success("Project created successfully!");
        router.push(`/projects/${project.id}`);
      } else {
        let errorMessage = "Failed to create project";
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || errorData.message || errorMessage;
        } catch {
          errorMessage = (await response.text()) || errorMessage;
        }
        toast.error(errorMessage);
      }
    } catch (error) {
      toast.error("An error occurred while creating the project");
      console.error("Project creation error:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const canProceedToNextTab = (currentTab: string) => {
    switch (currentTab) {
      case "basic":
        return tabValidation.basic;
      case "tags":
        return tabValidation.tags;
      case "milestones":
        return tabValidation.milestones;
      case "settings":
        return tabValidation.settings;
      default:
        return false;
    }
  };

  const goToNextTab = () => {
    const tabs = ["basic", "tags", "milestones", "settings"];
    const currentIndex = tabs.indexOf(activeTab);
    if (currentIndex < tabs.length - 1 && canProceedToNextTab(activeTab)) {
      setActiveTab(tabs[currentIndex + 1]);
    }
  };

  const goToPrevTab = () => {
    const tabs = ["basic", "tags", "milestones", "settings"];
    const currentIndex = tabs.indexOf(activeTab);
    if (currentIndex > 0) {
      setActiveTab(tabs[currentIndex - 1]);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Header with Cancel Button */}
      <div className="mb-8 relative">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Create New Project</h1>
            <p className="text-muted-foreground mt-2">
              Share your DIY tech project with the community
            </p>
          </div>

          {/* Cancel Button - Top Right */}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleCancel}
            className="flex items-center gap-2"
            disabled={isSubmitting}
          >
            <X className="h-4 w-4" />
            Cancel
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-4 mb-8">
          <TabsTrigger value="basic" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Basic Info
            {tabValidation.basic && (
              <div className="w-2 h-2 bg-green-500 rounded-full" />
            )}
          </TabsTrigger>
          <TabsTrigger
            value="tags"
            className="flex items-center gap-2"
            disabled={!tabValidation.basic}
          >
            <Tags className="h-4 w-4" />
            Tags
            {tabValidation.tags && tabValidation.basic && (
              <div className="w-2 h-2 bg-green-500 rounded-full" />
            )}
          </TabsTrigger>
          <TabsTrigger
            value="milestones"
            className="flex items-center gap-2"
            disabled={!tabValidation.basic}
          >
            <Target className="h-4 w-4" />
            Milestones
            {tabValidation.milestones && tabValidation.basic && (
              <div className="w-2 h-2 bg-green-500 rounded-full" />
            )}
          </TabsTrigger>
          <TabsTrigger
            value="settings"
            className="flex items-center gap-2"
            disabled={!tabValidation.basic || !tabValidation.milestones}
          >
            <Settings className="h-4 w-4" />
            Settings
            {tabValidation.settings &&
              tabValidation.basic &&
              tabValidation.milestones && (
                <div className="w-2 h-2 bg-green-500 rounded-full" />
              )}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="basic">
          <BasicInfoTab formData={formData} onUpdate={updateFormData} />
        </TabsContent>

        <TabsContent value="tags">
          <TagsTab selectedTags={selectedTags} onUpdate={updateSelectedTags} />
        </TabsContent>

        <TabsContent value="milestones">
          <MilestonesTab milestones={milestones} onUpdate={updateMilestones} />
        </TabsContent>

        <TabsContent value="settings">
          <SettingsTab formData={formData} onUpdate={updateFormData} />
        </TabsContent>

        {/* Navigation Buttons */}
        <div className="flex justify-between mt-8">
          <Button
            type="button"
            variant="outline"
            onClick={goToPrevTab}
            disabled={activeTab === "basic" || isSubmitting}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Previous
          </Button>

          <div className="flex gap-2">
            {activeTab !== "settings" ? (
              <Button
                type="button"
                onClick={goToNextTab}
                disabled={!canProceedToNextTab(activeTab) || isSubmitting}
              >
                Next
              </Button>
            ) : (
              <Button
                type="button"
                onClick={handleSubmit}
                className="min-w-[120px]"
                disabled={
                  !Object.values(tabValidation).every((valid) => valid) ||
                  isSubmitting
                }
              >
                {isSubmitting ? "Creating..." : "Create Project"}
              </Button>
            )}
          </div>
        </div>
      </Tabs>
    </div>
  );
}

================
File: src/app/globals.css
================
/* @import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

html {
  scrollbar-gutter: stable;
}


@supports not (scrollbar-gutter: stable) {
  html {
    overflow-y: scroll;
  }
}


body {
  min-height: 100vh;
}


::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: hsl(var(--muted) / 0.1);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--border));
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.5);
}

html {
  scrollbar-width: thin;
  scrollbar-color: hsl(var(--border)) hsl(var(--muted) / 0.1);
} */


@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  
  /* Light theme colors */
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  
  /* Shadow variables for light theme */
  --shadow: 0 1px 3px 0 oklch(0 0 0 / 0.1), 0 1px 2px -1px oklch(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px oklch(0 0 0 / 0.1), 0 4px 6px -4px oklch(0 0 0 / 0.1);
  --shadow-xl: 0 20px 25px -5px oklch(0 0 0 / 0.1), 0 8px 10px -6px oklch(0 0 0 / 0.1);
  
  /* Chart colors */
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  
  /* Sidebar colors */
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  /* Dark theme colors */
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(0.3 0 0); /* Fixed: More subtle border for dark theme */
  --input: oklch(0.3 0 0); /* Fixed: More subtle input border */
  --ring: oklch(0.556 0 0);
  
  /* Shadow variables for dark theme */
  --shadow: 0 1px 3px 0 oklch(0 0 0 / 0.3), 0 1px 2px -1px oklch(0 0 0 / 0.3);
  --shadow-lg: 0 10px 15px -3px oklch(0 0 0 / 0.4), 0 4px 6px -4px oklch(0 0 0 / 0.4);
  --shadow-xl: 0 20px 25px -5px oklch(0 0 0 / 0.5), 0 8px 10px -6px oklch(0 0 0 / 0.5);
  
  /* Chart colors */
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  
  /* Sidebar colors */
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.3 0 0); /* Fixed: More subtle sidebar border */
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply bg-background text-foreground;
    min-height: 100vh;
  }
  
  /* Apply shadows to common elements */
  .shadow-sm {
    box-shadow: var(--shadow);
  }
  
  .shadow-lg {
    box-shadow: var(--shadow-lg);
  }
  
  .shadow-xl {
    box-shadow: var(--shadow-xl);
  }
}

/* Prevent scrollbar flickering */
html {
  scrollbar-gutter: stable;
}

/* Fallback for older browsers */
@supports not (scrollbar-gutter: stable) {
  html {
    overflow-y: scroll;
  }
}

/* Theme-aware scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: oklch(from var(--muted) l c h / 0.1);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: var(--border);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: oklch(from var(--muted-foreground) l c h / 0.5);
}

/* Firefox */
html {
  scrollbar-width: thin;
  scrollbar-color: var(--border) oklch(from var(--muted) l c h / 0.1);
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { cn } from "@/lib/utils";
import { Toaster } from "sonner";
import { Providers } from "@/components/providers";
import { Navbar } from "@/components/navbar";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "MakersNest",
  description: "Share your Arduino and DIY tech projects",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={cn(inter.className, "min-h-screen bg-background")}>
        <Providers>
          <Navbar />
          <main className="container mx-auto px-4 py-8">{children}</main>
          <Toaster />
        </Providers>
      </body>
    </html>
  );
}

================
File: src/app/my-projects/my-projects-list.tsx
================
"use client";

import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Plus, Edit, Eye, MessageCircle, Calendar, Clock } from "lucide-react";
import Image from "next/image";

interface Project {
  id: string;
  title: string;
  description: string | null;
  imageUrl: string | null;
  status: string;
  difficulty: string;
  isPublished: boolean;
  createdAt: Date;
  updatedAt: Date;
  tags: Array<{
    tag: {
      id: string;
      name: string;
      color: string | null;
    };
  }>;
  _count: {
    comments: number;
  };
}

interface MyProjectsListProps {
  projects: Project[];
}

const STATUS_COLORS = {
  PLANNING:
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
  IN_PROGRESS: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
  COMPLETED:
    "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
  ON_HOLD:
    "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300",
  CANCELLED: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
};

export default function MyProjectsList({ projects }: MyProjectsListProps) {
  if (projects.length === 0) {
    return (
      <div className="max-w-6xl mx-auto p-6 space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">My Projects</h1>
            <p className="text-muted-foreground">
              Manage your DIY projects and tutorials
            </p>
          </div>
          <Button asChild>
            <Link href="/create">
              <Plus className="h-4 w-4 mr-2" />
              New Project
            </Link>
          </Button>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>No Projects Yet</CardTitle>
            <CardDescription>
              You haven&apos;t created any projects yet. Start sharing your DIY
              creations!
            </CardDescription>
          </CardHeader>
          <CardContent className="flex items-center justify-center min-h-[300px]">
            <div className="text-center space-y-4">
              <div className="text-muted-foreground">
                Create your first project to get started
              </div>
              <Button asChild>
                <Link href="/create">
                  <Plus className="h-4 w-4 mr-2" />
                  Create Your First Project
                </Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">My Projects</h1>
          <p className="text-muted-foreground">
            Manage your DIY projects and tutorials ({projects.length} total)
          </p>
        </div>
        <Button asChild>
          <Link href="/create">
            <Plus className="h-4 w-4 mr-2" />
            New Project
          </Link>
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {projects.map((project) => (
          <Card
            key={project.id}
            className="group hover:shadow-lg transition-shadow"
          >
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <CardTitle className="line-clamp-2 text-lg">
                    {project.title}
                  </CardTitle>
                  {project.description && (
                    <CardDescription className="line-clamp-2 mt-2">
                      {project.description}
                    </CardDescription>
                  )}
                </div>
                <div className="flex items-center gap-1 ml-2">
                  {!project.isPublished && (
                    <Badge
                      variant="outline"
                      className="text-xs border-orange-500 text-orange-600"
                    >
                      Draft
                    </Badge>
                  )}
                </div>
              </div>
            </CardHeader>

            {project.imageUrl && (
              <div className="px-6 pb-3">
                <Image
                  src={project.imageUrl}
                  alt={project.title}
                  className="w-full h-32 object-cover rounded-md border"
                />
              </div>
            )}

            <CardContent className="space-y-4">
              {/* Status and Progress */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Badge
                    className={
                      STATUS_COLORS[
                        project.status as keyof typeof STATUS_COLORS
                      ]
                    }
                  >
                    {project.status.replace("_", " ")}
                  </Badge>
                  
                </div>
                
              </div>

              {/* Tags */}
              {project.tags.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {project.tags.slice(0, 3).map(({ tag }) => (
                    <Badge
                      key={tag.id}
                      variant="secondary"
                      className="text-xs"
                      style={{
                        backgroundColor: tag.color
                          ? `${tag.color}20`
                          : undefined,
                      }}
                    >
                      {tag.name}
                    </Badge>
                  ))}
                  {project.tags.length > 3 && (
                    <Badge variant="secondary" className="text-xs">
                      +{project.tags.length - 3}
                    </Badge>
                  )}
                </div>
              )}

              {/* Meta Information */}
              <div className="flex items-center justify-between text-xs text-muted-foreground">
                <div className="flex items-center gap-4">
                  <div className="flex items-center gap-1">
                    <MessageCircle className="h-3 w-3" />
                    {project._count.comments}
                  </div>
                </div>
                <div className="flex items-center gap-1">
                  <Calendar className="h-3 w-3" />
                  {formatDistanceToNow(new Date(project.updatedAt), {
                    addSuffix: true,
                  })}
                </div>
              </div>

              {/* Actions */}
              <div className="flex gap-2 pt-2">
                <Button asChild size="sm" className="flex-1">
                  <Link href={`/projects/${project.id}`}>
                    <Eye className="h-3 w-3 mr-1" />
                    View
                  </Link>
                </Button>
                <Button asChild variant="outline" size="sm" className="flex-1">
                  <Link href={`/projects/${project.id}/edit`}>
                    <Edit className="h-3 w-3 mr-1" />
                    Edit
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: src/app/projects/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { prisma } from "@/lib/db";
import ProjectView from "./project-view";

interface ProjectPageProps {
  params: Promise<{
    id: string;
  }>;
}

async function getProject(id: string) {
  const project = await prisma.project.findUnique({
    where: { id },
    include: {
      author: {
        select: {
          id: true,
          name: true,
          email: true,
        },
      },
      tags: {
        include: {
          tag: true,
        },
      },
      comments: {
        include: {
          author: {
            select: {
              id: true,
              name: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      },
      progressPosts: {
        include: {
          author: {
            select: {
              id: true,
              name: true,
              image: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      },
      milestones: {
        select: {
          id: true,
          title: true,
          description: true,
          targetDate: true,
          isCompleted: true,
          completedAt: true,
          order: true,
          projectId: true,
          createdAt: true,
          updatedAt: true,
          icon: true,
        },
        orderBy: {
          order: "asc",
        },
      },
      _count: {
        select: {
          comments: true,
        },
      },
    },
  });

  return project;
}



export default async function ProjectPage({ params }: ProjectPageProps) {
  // Fix: Await params before accessing its properties
  const { id } = await params;
  const project = await getProject(id);

  if (!project) {
    notFound();
  }

  return <ProjectView project={project} />;
}

================
File: src/app/projects/[id]/project-view.tsx
================
"use client";

import { useSession } from "next-auth/react";
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import {
  Calendar,
  Clock,
  User,
  Edit,
  MessageCircle,
  ArrowLeft,
  Trash2,
} from "lucide-react";
import { ProgressPostForm } from "@/components/progress-post-form";
import Image from "next/image";
import { ProjectDeleteDialog } from "@/components/project-delete-dialog";
import { useState } from "react";
import { ProjectMilestoneProgressBar } from "@/components/project-milestone-progress-bar";
import { Milestone } from "@prisma/client";

interface ProjectViewProps {
  project: {
    id: string;
    title: string;
    description: string | null;
    content: string;
    imageUrl: string | null;
    status: string;
    difficulty: string;
    isPublished: boolean;
    createdAt: Date;
    updatedAt: Date;
    author: {
      id: string;
      name: string | null;
      email: string;
    };
    tags: Array<{
      tag: {
        id: string;
        name: string;
        slug: string;
        color: string | null;
      };
    }>;
    comments: Array<{
      id: string;
      content: string;
      createdAt: Date;
      author: {
        id: string;
        name: string | null;
      };
    }>;
    // Add progress posts
    progressPosts: Array<{
      id: string;
      title: string;
      content: string;
      imageUrl: string | null;
      createdAt: Date;
      author: {
        id: string;
        name: string | null;
        image: string | null;
      };
    }>;
    milestones: Milestone[];
    _count: {
      comments: number;
    };
  };
}

export default function ProjectView({ project }: ProjectViewProps) {
  const { data: session } = useSession();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  console.log(project);

  const milestonesForUI = project.milestones.map((m) => ({
    ...m,
    targetDate:
      m.targetDate instanceof Date
        ? m.targetDate.toISOString().slice(0, 10)
        : m.targetDate,
  }));

  return (
    <div className="container mx-auto py-8">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-8">
          {/* Header with project title and actions */}
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div className="flex items-center gap-2">
              <Link
                href="/"
                className="text-muted-foreground hover:text-foreground"
              >
                <ArrowLeft className="h-4 w-4" />
              </Link>
              <h1 className="text-3xl font-bold">{project.title}</h1>
            </div>

            <div className="flex gap-2">
              {/* Add Progress Post button for project owners */}
              {session?.user?.id === project.author.id && (
                <ProgressPostForm
                  projectId={project.id}
                  projectTitle={project.title}
                />
              )}

              {/* Existing Edit button */}
              {session?.user?.id === project.author.id && (
                <Button asChild variant="outline">
                  <Link href={`/projects/${project.id}/edit`}>
                    <Edit className="h-4 w-4 mr-2" />
                    Edit Project
                  </Link>
                </Button>
              )}

              {/* Delete button */}
              {session?.user?.id === project.author.id && (
                <Button
                  variant="destructive"
                  onClick={() => setShowDeleteDialog(true)}
                  className="gap-2"
                >
                  <Trash2 className="h-4 w-4" />
                  Delete
                </Button>
              )}
            </div>
          </div>

          {/* Project Image */}
          {project.imageUrl && (
            <div className="w-full">
              <Image
                src={project.imageUrl}
                alt={project.title}
                className="w-full h-64 sm:h-80 object-cover rounded-lg border"
              />
            </div>
          )}

          {/* Project Description */}
          {project.description && (
            <Card>
              <CardHeader>
                <CardTitle>Description</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">{project.description}</p>
              </CardContent>
            </Card>
          )}

          {/* Project Content */}
          <Card>
            <CardHeader>
              <CardTitle>Project Details</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="prose max-w-none">
                <p className="whitespace-pre-wrap">{project.content}</p>
              </div>
            </CardContent>
          </Card>

          {/* Progress Posts Section */}
          {project.progressPosts && project.progressPosts.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>Progress Updates</CardTitle>
                <CardDescription>
                  Follow the journey of this project through these progress
                  updates
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {project.progressPosts.map((post) => (
                  <div
                    key={post.id}
                    className="border-l-2 border-border pl-4 space-y-2"
                  >
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold">{post.title}</h3>
                      <Badge variant="outline">
                        {formatDistanceToNow(post.createdAt, {
                          addSuffix: true,
                        })}
                      </Badge>
                    </div>

                    {post.imageUrl && (
                      <Image
                        src={post.imageUrl}
                        alt={post.title}
                        className="w-full h-48 object-cover rounded-lg border"
                      />
                    )}

                    <p className="text-muted-foreground whitespace-pre-wrap">
                      {post.content}
                    </p>

                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <User className="h-3 w-3" />
                      <span>{post.author.name || "Unknown"}</span>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Comments Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageCircle className="h-5 w-5" />
                Comments ({project._count.comments})
              </CardTitle>
            </CardHeader>
            <CardContent>
              {project.comments.length > 0 ? (
                <div className="space-y-4">
                  {project.comments.map((comment) => (
                    <div
                      key={comment.id}
                      className="border-l-2 border-border pl-4"
                    >
                      <div className="flex items-center gap-2 mb-2">
                        <Avatar className="h-6 w-6">
                          <AvatarFallback className="text-xs">
                            {comment.author.name?.[0] || "?"}
                          </AvatarFallback>
                        </Avatar>
                        <span className="text-sm font-medium">
                          {comment.author.name || "Unknown"}
                        </span>
                        <span className="text-xs text-muted-foreground">
                          {formatDistanceToNow(comment.createdAt, {
                            addSuffix: true,
                          })}
                        </span>
                      </div>
                      <p className="text-sm">{comment.content}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-muted-foreground">No comments yet.</p>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Project Info */}
          <Card>
            <CardHeader>
              <CardTitle>Project Info</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Author */}
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <span className="text-muted-foreground">Created by:</span>{" "}
                  {project.author.name || "Unknown"}
                </span>
              </div>

              {/* Created Date */}
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <span className="text-muted-foreground">Created:</span>{" "}
                  {formatDistanceToNow(project.createdAt, { addSuffix: true })}
                </span>
              </div>

              {/* Status */}
              <div className="flex items-center gap-2">
                <span className="text-sm">
                  <span className="text-muted-foreground">Status:</span>{" "}
                  <Badge variant="outline">{project.status}</Badge>
                </span>
              </div>

              {/* Difficulty */}
              <div className="flex items-center gap-2">
                <span className="text-sm">
                  <span className="text-muted-foreground">Difficulty:</span>{" "}
                  <Badge variant="outline">{project.difficulty}</Badge>
                </span>
              </div>

              {/* Progress */}
              <div className="space-y-2">
                <ProjectMilestoneProgressBar
                  milestones={milestonesForUI}
                  creationDate={project.createdAt}
                />
              </div>

              {/* Tags */}
              {project.tags.length > 0 && (
                <div className="space-y-2">
                  <span className="text-sm text-muted-foreground">Tags:</span>
                  <div className="flex flex-wrap gap-2">
                    {project.tags.map(({ tag }) => (
                      <Badge
                        key={tag.id}
                        variant="outline"
                        style={{ backgroundColor: tag.color || undefined }}
                      >
                        {tag.name}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
      <ProjectDeleteDialog
        open={showDeleteDialog}
        onOpenChange={setShowDeleteDialog}
        projectId={project.id}
        projectName={project.title}
      />
    </div>
  );
}

================
File: src/components/navbar.tsx
================
'use client'

import { useSession, signOut } from 'next-auth/react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { ThemeToggle } from "@/components/theme-toggle";

export function Navbar() {
  const { data: session, status } = useSession();

  return (
    <nav className="border-b">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link href="/" className="text-2xl font-bold">
          <span className="text-foreground font-bold">Makers</span>
          <span className="font-bold italic bg-gradient-to-r from-orange-800 to-orange-400 bg-clip-text text-transparent pr-1">
            Nest
          </span>
        </Link>

        <div className="flex items-center gap-4">
          <ThemeToggle />
          {status === "loading" ? (
            <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
          ) : session ? (
            <div className="flex items-center gap-4">
              <Button asChild variant="outline">
                <Link href="/create">New Project</Link>
              </Button>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    className="relative h-8 w-8 rounded-full"
                  >
                    <Avatar className="h-8 w-8">
                      <AvatarFallback>
                        {session.user?.name?.[0]?.toUpperCase() || "U"}
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-56" align="end" forceMount>
                  <div className="flex flex-col space-y-1 p-2">
                    <p className="text-sm font-medium leading-none">
                      {session.user?.name}
                    </p>
                    <p className="text-xs leading-none text-muted-foreground">
                      {session.user?.email}
                    </p>
                  </div>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem asChild>
                    <Link href="/my-projects">My Projects</Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/settings">Settings</Link>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    className="cursor-pointer"
                    onClick={() => signOut({ callbackUrl: "/" })}
                  >
                    Sign out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <Button asChild variant="ghost">
                <Link href="/login">Sign in</Link>
              </Button>
              <Button asChild>
                <Link href="/register">Sign up</Link>
              </Button>
            </div>
          )}
        </div>
      </div>
    </nav>
  );
}

================
File: src/components/providers.tsx
================
'use client'

import { SessionProvider } from 'next-auth/react'
import { ThemeProvider } from 'next-themes'
import { ReactNode } from 'react'

interface ProvidersProps {
  children: ReactNode
}

export function Providers({ children }: ProvidersProps) {
  return (
    <SessionProvider>
      <ThemeProvider
        attribute="class"
        defaultTheme="system"
        enableSystem
        disableTransitionOnChange
      >
        {children}
      </ThemeProvider>
      {/* {children} */}
    </SessionProvider>
  )
}

================
File: src/lib/auth.ts
================
// src/lib/auth.ts
import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import GitHubProvider from "next-auth/providers/github";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import { prisma } from "@/lib/db";
import bcrypt from "bcryptjs";

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    GitHubProvider({
      clientId: process.env.GITHUB_ID!,
      clientSecret: process.env.GITHUB_SECRET!,
    }),
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        console.log("🔍 Credentials authorize called:", credentials?.email);

        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        const user = await prisma.user.findUnique({
          where: { email: credentials.email },
          include: { accounts: true },
        });

        if (!user) {
          return null;
        }

        if (!user.password) {
          const oauthProviders = user.accounts.map((acc) => acc.provider);
          throw new Error(
            JSON.stringify({
              type: "OAuthOnlyAccount",
              email: user.email,
              providers: oauthProviders,
            })
          );
        }

        const isPasswordValid = await bcrypt.compare(
          credentials.password,
          user.password
        );

        if (!isPasswordValid) {
          return null;
        }

        return {
          id: user.id,
          email: user.email,
          name: user.name,
          image: user.image,
        };
      },
    }),
  ],
  session: {
    strategy: "jwt", // ✅ Change from 'database' to 'jwt'
    maxAge: 30 * 24 * 60 * 60,
  },
  pages: {
    signIn: "/login",
    error: "/login/error",
  },
  callbacks: {
    async jwt({ token, user, account }) {

      // Store user data in JWT token
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
        token.image = user.image;
      }

      return token;
    },
    async session({ session, token }) {
      

      // Pass user data from JWT token to session
      if (session?.user && token) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
        session.user.name = token.name as string;
        session.user.image = token.image as string;
      }

      return session;
    },
    async signIn({ user, account, profile }) {
      console.log("🚪 SignIn callback:", {
        email: user.email,
        provider: account?.provider,
      });

      // Allow credentials sign-in
      if (account?.provider === "credentials") {
        return true;
      }

      // Handle OAuth account linking (your existing logic)
      if (account?.provider && user.email) {
        const existingUser = await prisma.user.findUnique({
          where: { email: user.email },
          include: { accounts: true },
        });

        if (existingUser) {
          const hasProvider = existingUser.accounts.some(
            (acc) => acc.provider === account.provider
          );

          if (!hasProvider) {
            try {
              await prisma.account.create({
                data: {
                  userId: existingUser.id,
                  type: account.type,
                  provider: account.provider,
                  providerAccountId: account.providerAccountId,
                  access_token: account.access_token,
                  refresh_token: account.refresh_token,
                  expires_at: account.expires_at,
                  token_type: account.token_type,
                  scope: account.scope,
                  id_token: account.id_token,
                  session_state: account.session_state,
                },
              });
              console.log(`✅ Linked ${account.provider} to ${user.email}`);
            } catch (error) {
              console.error("Account linking failed:", error);
            }
          }

          user.id = existingUser.id;
        }
      }

      return true;
    },
  },
};

================
File: src/lib/milestone-templates.ts
================
import { MilestoneTemplate } from "@/types/project";
import {
  ClipboardList,
  Brush,
  Rocket,
  Settings,
  CheckCircle,
  Search,
  MessageCircle,
  Eye,
  Flag,
  BarChart2,
} from "lucide-react";

export const MILESTONE_TEMPLATES: MilestoneTemplate[] = [
  {
    id: "project-setup",
    name: "Project Planning & Setup",
    description: "Initial planning, requirements gathering, and project setup",
    suggestedDuration: 14,
    category: "planning",
    icon: ClipboardList,
  },
  {
    id: "research-design",
    name: "Research & Design Phase",
    description: "Research, prototyping, and design work",
    suggestedDuration: 30,
    category: "planning",
    icon: Brush,
  },
  {
    id: "development-start",
    name: "Development Kickoff",
    description: "Begin main development or implementation work",
    suggestedDuration: 45,
    category: "development",
    icon: Rocket,
  },
  {
    id: "mid-development",
    name: "Mid-Development Checkpoint",
    description: "Major progress check and course correction if needed",
    suggestedDuration: 75,
    category: "development",
    icon: Settings,
  },
  {
    id: "development-complete",
    name: "Development Complete",
    description: "Main development work finished, ready for testing",
    suggestedDuration: 90,
    category: "development",
    icon: CheckCircle,
  },
  {
    id: "testing-phase",
    name: "Testing & Quality Assurance",
    description: "Testing, bug fixes, and quality improvements",
    suggestedDuration: 105,
    category: "testing",
    icon: Search,
  },
  {
    id: "user-feedback",
    name: "User Feedback & Iterations",
    description: "Gather feedback and make final improvements",
    suggestedDuration: 120,
    category: "review",
    icon: MessageCircle,
  },
  {
    id: "final-review",
    name: "Final Review & Approval",
    description: "Final review, approval, and preparation for launch",
    suggestedDuration: 130,
    category: "review",
    icon: Eye,
  },
  {
    id: "launch",
    name: "Launch & Completion",
    description: "Project launch, deployment, or final delivery",
    suggestedDuration: 140,
    category: "launch",
    icon: Flag,
  },
  {
    id: "post-launch",
    name: "Post-Launch Review",
    description:
      "Monitor results, gather insights, and document lessons learned",
    suggestedDuration: 160,
    category: "review",
    icon: BarChart2,
  },
];

export function getMilestoneTemplatesByCategory() {
  return MILESTONE_TEMPLATES.reduce((acc, template) => {
    if (!acc[template.category]) {
      acc[template.category] = [];
    }
    acc[template.category].push(template);
    return acc;
  }, {} as Record<string, MilestoneTemplate[]>);
}

export function calculateSuggestedDate(
  startDate: Date,
  daysFromStart: number
): string {
  const date = new Date(startDate);
  date.setDate(date.getDate() + daysFromStart);
  return date.toISOString().split("T")[0]; // Return YYYY-MM-DD format
}

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  bio           String? // Add bio field
  website       String? // Add website field
  location      String? // Add location field
  projects      Project[]
  progressPosts ProgressPost[]
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String?
  content       String         @db.Text
  imageUrl      String?
  status        ProjectStatus  @default(PLANNING)
  difficulty    Difficulty
  isPublished   Boolean        @default(false)
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags          ProjectTag[]
  comments      Comment[]
  progressPosts ProgressPost[]
  milestones    Milestone[] // Flexible number of milestones
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("projects")
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int // Dynamic ordering, not fixed 1-5
  icon        String?
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([projectId, order])
  @@map("milestones")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  color     String? // Hex color for the tag
  projects  ProjectTag[]
  createdAt DateTime     @default(now())

  @@map("tags")
}

model ProjectTag {
  id        String  @id @default(cuid())
  projectId String
  tagId     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagId])
  @@map("project_tags")
}

model ProgressPost {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  imageUrl  String?
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  @@map("progress_posts")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Comment {
  id             String        @id @default(cuid())
  content        String
  authorId       String
  projectId      String?
  progressPostId String?
  author         User          @relation(fields: [authorId], references: [id])
  project        Project?      @relation(fields: [projectId], references: [id])
  progressPost   ProgressPost? @relation(fields: [progressPostId], references: [id])
  createdAt      DateTime      @default(now())
}

================
File: src/app/projects/[id]/edit/project-edit-form.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { toast } from "sonner";
import { X, Plus, Upload, ArrowLeft, Trash2 } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { ProjectDeleteDialog } from "@/components/project-delete-dialog";
import { MilestoneInput } from "@/components/milestone-input";
import { Tag, UiMilestone } from "@/types/project";

interface Project {
  id: string;
  title: string;
  description: string | null;
  content: string;
  imageUrl: string | null;
  status: string;
  difficulty: string;
  isPublished: boolean;
  tags: Array<{
    tag: Tag;
  }>;
  milestones: UiMilestone[]; // Add milestones to project interface
}

interface ProjectEditFormProps {
  project: Project;
}

const DIFFICULTY_OPTIONS = [
  {
    value: "BEGINNER",
    label: "Beginner",
    description: "Perfect for first-time makers",
  },
  {
    value: "INTERMEDIATE",
    label: "Intermediate",
    description: "Some experience required",
  },
  {
    value: "ADVANCED",
    label: "Advanced",
    description: "Solid making experience needed",
  },
  {
    value: "EXPERT",
    label: "Expert",
    description: "Professional-level skills required",
  },
];

const STATUS_OPTIONS = [
  {
    value: "PLANNING",
    label: "Planning",
    description: "Still in planning phase",
  },
  {
    value: "IN_PROGRESS",
    label: "In Progress",
    description: "Currently working on it",
  },
  {
    value: "COMPLETED",
    label: "Completed",
    description: "Project is finished",
  },
  { value: "ON_HOLD", label: "On Hold", description: "Temporarily paused" },
  { value: "CANCELLED", label: "Cancelled", description: "Project cancelled" },
];

export default function ProjectEditForm({ project }: ProjectEditFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [availableTags, setAvailableTags] = useState<Tag[]>([]);
  const [selectedTags, setSelectedTags] = useState<Tag[]>(
    project.tags.map((pt) => pt.tag)
  );
  const [newTagName, setNewTagName] = useState("");
  const [imagePreview, setImagePreview] = useState<string>(
    project.imageUrl || ""
  );

  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  // Form state initialized with project data
  const [formData, setFormData] = useState({
    title: project.title,
    description: project.description || "",
    content: project.content,
    imageUrl: project.imageUrl || "",
    status: project.status,
    difficulty: project.difficulty,
    isPublished: project.isPublished,
  });

  const convertMilestoneForForm = (dbMilestone: any): UiMilestone => ({
    id: dbMilestone.id, // ✅ Now included in interface
    title: dbMilestone.title,
    description: dbMilestone.description,
    targetDate: dbMilestone.targetDate.toISOString().split("T")[0],
    isCompleted: dbMilestone.isCompleted,
    completedAt: dbMilestone.completedAt,
    order: dbMilestone.order, // ✅ Now included in interface
    projectId: dbMilestone.projectId, // ✅ Now included in interface
    createdAt: dbMilestone.createdAt, // ✅ Now included in interface
    updatedAt: dbMilestone.updatedAt, // ✅ Now included in interface
    isFromTemplate: false,
    templateId: undefined,
    icon: dbMilestone.icon || undefined,
  });

  const [milestones, setMilestones] = useState<UiMilestone[]>(
    project.milestones.length > 0
      ? project.milestones
          .sort((a, b) => (a.order ?? 0) - (b.order ?? 0))
          .map(convertMilestoneForForm)
      : [
          {
            title: "",
            description: null,
            targetDate: "",
            isCompleted: false,
            isFromTemplate: false,
            templateId: undefined,
            icon: undefined,
            completedAt: null,
            // Database fields are optional for new milestones
          },
        ]
  );
  // Fetch available tags
  useEffect(() => {
    fetchTags();
  }, []);

  const fetchTags = async () => {
    try {
      const response = await fetch("/api/tags");
      if (response.ok) {
        const tags = await response.json();
        setAvailableTags(tags);
      }
    } catch (error) {
      console.error("Failed to fetch tags:", error);
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setImagePreview(result);
        setFormData((prev) => ({ ...prev, imageUrl: result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const addTag = (tag: Tag) => {
    if (!selectedTags.find((t) => t.id === tag.id)) {
      setSelectedTags([...selectedTags, tag]);
    }
  };

  const removeTag = (tagId: string) => {
    setSelectedTags(selectedTags.filter((t) => t.id !== tagId));
  };

  const createNewTag = async () => {
    if (!newTagName.trim()) return;

    try {
      const response = await fetch("/api/tags", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: newTagName.trim() }),
      });

      if (response.ok) {
        const newTag = await response.json();
        setAvailableTags([...availableTags, newTag]);
        addTag(newTag);
        setNewTagName("");
        toast.success("Tag created and added!");
      } else {
        toast.error("Failed to create tag");
      }
    } catch (error) {
      toast.error("Something went wrong");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.title.trim()) {
      toast.error("Project title is required");
      return;
    }

    if (!formData.content.trim()) {
      toast.error("Project content is required");
      return;
    }

    if (selectedTags.length === 0) {
      toast.error("Please add at least one tag");
      return;
    }

    const invalidMilestone = milestones.find(
      (m) => !m.title.trim() || !m.targetDate
    );
    if (invalidMilestone) {
      toast.error("Please fill in all milestone titles and dates");
      return;
    }

    // Validate milestone dates are in chronological order
    const sortedMilestones = [...milestones].sort(
      (a, b) =>
        new Date(a.targetDate).getTime() - new Date(b.targetDate).getTime()
    );
    for (let i = 1; i < sortedMilestones.length; i++) {
      if (
        new Date(sortedMilestones[i].targetDate) <=
        new Date(sortedMilestones[i - 1].targetDate)
      ) {
        toast.error("Milestone dates must be in chronological order");
        return;
      }
    }

    setIsLoading(true);

    try {
      const projectData = {
        title: formData.title.trim(),
        description: formData.description.trim(),
        content: formData.content.trim(),
        imageUrl: formData.imageUrl,
        status: formData.status,
        difficulty: formData.difficulty,
        isPublished: formData.isPublished,
        tagIds: selectedTags.map((t) => t.id),
        milestones: milestones, // Add milestones to the request
      };

      const response = await fetch(`/api/projects/${project.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(projectData),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success("Project updated successfully!");
        router.push(`/projects/${project.id}`);
      } else {
        toast.error(data.error || "Failed to update project");
      }
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/projects/${project.id}`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Project
          </Link>
        </Button>
      </div>

      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold">Edit Project</h1>
          <p className="text-muted-foreground">
            Update your project details and content
          </p>
        </div>
        <Button
          variant="destructive"
          size="sm"
          onClick={() => setShowDeleteDialog(true)}
          className="gap-2"
        >
          <Trash2 className="h-4 w-4" />
          Delete Project
        </Button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
            <CardDescription>Update your project details</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="title">Project Title *</Label>
              <Input
                id="title"
                placeholder="My Awesome DIY Project"
                value={formData.title}
                onChange={(e) => handleInputChange("title", e.target.value)}
                maxLength={100}
              />
              <div className="text-xs text-muted-foreground">
                {formData.title.length}/100 characters
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Short Description</Label>
              <Textarea
                id="description"
                placeholder="A brief description of your project..."
                value={formData.description}
                onChange={(e) =>
                  handleInputChange("description", e.target.value)
                }
                maxLength={200}
                rows={3}
              />
              <div className="text-xs text-muted-foreground">
                {formData.description.length}/200 characters
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="content">Project Details *</Label>
              <Textarea
                id="content"
                placeholder="Detailed instructions, materials needed, step-by-step guide..."
                value={formData.content}
                onChange={(e) => handleInputChange("content", e.target.value)}
                rows={8}
                className="min-h-[120px]"
              />
            </div>
          </CardContent>
        </Card>

        {/* Image Upload */}
        <Card>
          <CardHeader>
            <CardTitle>Project Image</CardTitle>
            <CardDescription>Update your project cover image</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="image-upload"
                />
                <Label htmlFor="image-upload" className="cursor-pointer">
                  <div className="flex items-center gap-2 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors">
                    <Upload className="h-4 w-4" />
                    {imagePreview ? "Change Image" : "Upload Image"}
                  </div>
                </Label>
              </div>

              {imagePreview && (
                <div className="relative w-full max-w-md">
                  <Image
                    src={imagePreview}
                    alt="Project preview"
                    width={400}
                    height={192}
                    className="w-full h-48 object-cover rounded-lg border"
                  />
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    className="absolute top-2 right-2"
                    onClick={() => {
                      setImagePreview("");
                      setFormData((prev) => ({ ...prev, imageUrl: "" }));
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Tags */}
        <Card>
          <CardHeader>
            <CardTitle>Tags *</CardTitle>
            <CardDescription>
              Update tags to help others find your project
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Selected Tags */}
            {selectedTags.length > 0 && (
              <div className="space-y-2">
                <Label>Selected Tags</Label>
                <div className="flex flex-wrap gap-2">
                  {selectedTags.map((tag) => (
                    <Badge
                      key={tag.id}
                      variant="secondary"
                      className="px-3 py-1"
                    >
                      {tag.name}
                      <button
                        type="button"
                        onClick={() => removeTag(tag.id)}
                        className="ml-2 hover:text-destructive"
                      >
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* Available Tags */}
            {availableTags.length > 0 && (
              <div className="space-y-2">
                <Label>Available Tags</Label>
                <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
                  {availableTags
                    .filter(
                      (tag) => !selectedTags.find((st) => st.id === tag.id)
                    )
                    .map((tag) => (
                      <Badge
                        key={tag.id}
                        variant="outline"
                        className="cursor-pointer hover:bg-muted"
                        onClick={() => addTag(tag)}
                      >
                        <Plus className="h-3 w-3 mr-1" />
                        {tag.name}
                      </Badge>
                    ))}
                </div>
              </div>
            )}

            {/* Create New Tag */}
            <div className="space-y-2">
              <Label>Create New Tag</Label>
              <div className="flex gap-2">
                <Input
                  placeholder="Enter tag name"
                  value={newTagName}
                  onChange={(e) => setNewTagName(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && createNewTag()}
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={createNewTag}
                  disabled={!newTagName.trim()}
                >
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Milestones - Replace the estimated/actual hours section */}
        <MilestoneInput milestones={milestones} onChange={setMilestones} />

        {/* Project Settings */}
        <Card>
          <CardHeader>
            <CardTitle>Project Settings</CardTitle>
            <CardDescription>
              Update project status and information
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label>Difficulty Level</Label>
                <Select
                  value={formData.difficulty}
                  onValueChange={(value) =>
                    handleInputChange("difficulty", value)
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {DIFFICULTY_OPTIONS.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        <div>
                          <div className="font-medium">{option.label}</div>
                          <div className="text-xs text-muted-foreground">
                            {option.description}
                          </div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>Current Status</Label>
                <Select
                  value={formData.status}
                  onValueChange={(value) => handleInputChange("status", value)}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {STATUS_OPTIONS.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        <div>
                          <div className="font-medium">{option.label}</div>
                          <div className="text-xs text-muted-foreground">
                            {option.description}
                          </div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Publishing Options */}
        <Card>
          <CardHeader>
            <CardTitle>Publishing Options</CardTitle>
            <CardDescription>Update visibility settings</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <Switch
                id="publish"
                checked={formData.isPublished}
                onCheckedChange={(checked) =>
                  handleInputChange("isPublished", checked)
                }
              />
              <Label htmlFor="publish">Published (visible to everyone)</Label>
            </div>
            {!formData.isPublished && (
              <p className="text-sm text-muted-foreground mt-2">
                Your project is currently saved as a draft and only visible to
                you
              </p>
            )}
          </CardContent>
        </Card>

        {/* Submit Buttons */}
        <div className="flex gap-4">
          <Button type="submit" disabled={isLoading} className="flex-1">
            {isLoading ? "Updating Project..." : "Update Project"}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>

        {/* Delete Confirmation Dialog */}
        <ProjectDeleteDialog
          open={showDeleteDialog}
          onOpenChange={setShowDeleteDialog}
          projectId={project.id}
          projectName={project.title}
        />
      </form>
    </div>
  );
}

================
File: src/components/milestone-input.tsx
================
"use client";

import { DndProvider } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Target, Plus } from "lucide-react";
import React from "react";
import { MilestoneItem } from "./milestone-item";
import { MilestoneTemplateSelector } from "./milestone-template-selector";
import type { UiMilestone, MilestoneTemplate } from "@/types/project";

interface MilestoneInputProps {
  milestones: UiMilestone[];
  onChange: (milestones: UiMilestone[]) => void;
  minMilestones?: number;
  maxMilestones?: number;
}

export function MilestoneInput({
  milestones,
  onChange,
  minMilestones = 1,
  maxMilestones = 10,
}: MilestoneInputProps) {
  const addMilestone = () => {
    if (milestones.length >= maxMilestones) return;

    onChange([
      ...milestones,
      {
        title: "",
        description: "",
        targetDate: "",
        isCompleted: false,
        icon: undefined,
        isFromTemplate: false,
      },
    ]);
  };

  const addFromTemplate = (template: MilestoneTemplate) => {
    if (milestones.length >= maxMilestones) return;

    onChange([
      ...milestones,
      {
        title: template.name,
        description: template.description,
        targetDate: "",
        isCompleted: false,
        isFromTemplate: true,
        templateId: template.id,
        // icon comes from template.icon
      },
    ]);
  };

  const removeMilestone = (index: number) => {
    if (milestones.length > minMilestones) {
      const newMilestones = milestones.filter((_, i) => i !== index);
      onChange(newMilestones);
    }
  };

  const moveMilestone = (fromIndex: number, toIndex: number) => {
    if (fromIndex === toIndex) return;
    const updated = [...milestones];
    const [moved] = updated.splice(fromIndex, 1);
    updated.splice(toIndex, 0, moved);
    onChange(updated);
  };

  const updateMilestone = (
    index: number,
    field: keyof UiMilestone,
    value: string | boolean
  ) => {
    const updated = [...milestones];
    updated[index] = {
      ...updated[index],
      [field]: value,
      ...(field === "title" && updated[index].isFromTemplate
        ? { isFromTemplate: false, templateId: undefined }
        : {}),
    };
    onChange(updated);
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Project Milestones
              <span className="inline-block rounded-md border border-border px-2 py-1 text-xs font-mono">
                {milestones.length}/{maxMilestones}
              </span>
            </CardTitle>
          </div>

          <p className="mt-3 text-sm text-muted-foreground">
            Add milestones to track your project&apos;s progress. Choose from
            templates or create custom ones.
          </p>

          {milestones.length < minMilestones && (
            <Alert className="mt-3">
              <AlertDescription>
                You need at least {minMilestones} milestone
                {minMilestones > 1 ? "s" : ""} to create your project.
              </AlertDescription>
            </Alert>
          )}
        </CardHeader>

        <CardContent className="space-y-6">
          {milestones.length === 0 ? (
            <div className="text-center text-muted-foreground py-8">
              <Target className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p className="mb-4">
                No milestones yet. Get started by choosing a template or
                creating a custom milestone.
              </p>

              <div className="flex flex-col sm:flex-row gap-3 justify-center max-w-md mx-auto">
                <MilestoneTemplateSelector onSelectTemplate={addFromTemplate} />
                <Button variant="outline" onClick={addMilestone}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Custom Milestone
                </Button>
              </div>
            </div>
          ) : (
            <>
              {milestones.map((milestone, index) => (
                <MilestoneItem
                  key={index}
                  milestone={milestone}
                  index={index}
                  onUpdate={updateMilestone}
                  onRemove={removeMilestone}
                  onMove={moveMilestone}
                  canRemove={milestones.length > minMilestones}
                  totalMilestones={milestones.length}
                />
              ))}

              {milestones.length < maxMilestones && (
                <div className="mt-4 grid grid-cols-1 lg:grid-cols-2 gap-3">
                  <MilestoneTemplateSelector
                    onSelectTemplate={addFromTemplate}
                  />
                  <Button
                    variant="outline"
                    onClick={addMilestone}
                    className="w-full"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Custom Milestone ({milestones.length}/{maxMilestones})
                  </Button>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>
    </DndProvider>
  );
}

================
File: package.json
================
{
  "name": "diy-tech-hub",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:push": "dotenv -e .env.local -- npx prisma db push",
    "db:push-force": "dotenv -e .env.local -- npx prisma db push --force-reset",
    "db:pull": "dotenv -e .env.local -- npx prisma db pull",
    "prisma:generate": "dotenv -e .env.local -- npx prisma generate",
    "prisma:studio": "dotenv -e .env.local -- npx prisma studio",
    "migrate:dev": "dotenv -e .env.local -- npx prisma migrate dev"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.0",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.12.0",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "cloudinary": "^2.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv-cli": "^9.0.0",
    "lucide-react": "^0.526.0",
    "next": "15.4.4",
    "next-auth": "^4.24.11",
    "next-themes": "^0.4.6",
    "prisma": "^6.12.0",
    "react": "19.1.0",
    "react-day-picker": "^9.8.1",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.61.1",
    "sonner": "^2.0.6",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.0.10"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.4",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.6",
    "typescript": "^5"
  }
}

================
File: src/app/page.tsx
================
import { prisma } from "@/lib/db";
import { ProgressPostCard } from "@/components/progress-post-card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export const revalidate = 60; // ISR every minute

export default async function HomePage() {
  /* --- Fetch --- */
  const [posts, tags, popular] = await Promise.all([
    prisma.progressPost.findMany({
      where: { project: { isPublished: true } },
      take: 10,
      orderBy: { createdAt: "desc" },
      include: {
        author: { select: { id: true, name: true, image: true } },
        project: {
          select: {
            id: true,
            title: true,
            imageUrl: true,
            tags: { include: { tag: true } },
            createdAt: true,
            milestones: {
              select: {
                id: true,
                title: true,
                description: true,
                targetDate: true,
                isCompleted: true,
                completedAt: true,
                order: true,
                icon: true,

                // Add any other fields required in UI
              },
              orderBy: { order: "asc" }, // sort milestones by order ascending
            },
          },
        },
        // Include comment count
        _count: {
          select: { comments: true },
        },
      },
    }),

    prisma.tag.findMany({
      take: 15,
      orderBy: { projects: { _count: "desc" } },
    }),

    prisma.project.findMany({
      where: { isPublished: true },
      take: 5,
      orderBy: { progressPosts: { _count: "desc" } },
      select: { id: true, title: true },
    }),
  ]);

  /* --- Layout --- */
  return (
    <div className="container mx-auto flex flex-col lg:flex-row gap-8 py-8">
      {/* Feed */}
      <main className="flex-1 space-y-6">
        {posts.map((post) => (
          <ProgressPostCard key={post.id} post={post} />
        ))}
      </main>

      {/* Sidebar */}
      <aside className="w-full lg:w-72 space-y-6">
        {/* Tags */}
        <Card>
          <CardHeader>
            <CardTitle className="text-sm font-medium">Top Tags</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-2">
            {tags.map((t) => (
              <span
                key={t.id}
                className="text-xs px-2 py-1 rounded-md border"
                style={{ background: t.color ?? undefined }}
              >
                {t.name}
              </span>
            ))}
          </CardContent>
        </Card>

        {/* Popular Projects */}
        <Card>
          <CardHeader>
            <CardTitle className="text-sm font-medium">
              Popular Projects
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            {popular.map((p) => (
              <a
                key={p.id}
                href={`/projects/${p.id}`}
                className="block text-sm underline hover:no-underline"
              >
                {p.title}
              </a>
            ))}
          </CardContent>
        </Card>
      </aside>
    </div>
  );
}




================================================================
End of Codebase
================================================================
